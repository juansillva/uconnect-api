
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Professor
 * 
 */
export type Professor = $Result.DefaultSelection<Prisma.$ProfessorPayload>
/**
 * Model Turma
 * 
 */
export type Turma = $Result.DefaultSelection<Prisma.$TurmaPayload>
/**
 * Model ProfessorTurma
 * 
 */
export type ProfessorTurma = $Result.DefaultSelection<Prisma.$ProfessorTurmaPayload>
/**
 * Model Post
 * 
 */
export type Post = $Result.DefaultSelection<Prisma.$PostPayload>
/**
 * Model PostArquivo
 * 
 */
export type PostArquivo = $Result.DefaultSelection<Prisma.$PostArquivoPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Professors
 * const professors = await prisma.professor.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Professors
   * const professors = await prisma.professor.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.professor`: Exposes CRUD operations for the **Professor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Professors
    * const professors = await prisma.professor.findMany()
    * ```
    */
  get professor(): Prisma.ProfessorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.turma`: Exposes CRUD operations for the **Turma** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Turmas
    * const turmas = await prisma.turma.findMany()
    * ```
    */
  get turma(): Prisma.TurmaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.professorTurma`: Exposes CRUD operations for the **ProfessorTurma** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProfessorTurmas
    * const professorTurmas = await prisma.professorTurma.findMany()
    * ```
    */
  get professorTurma(): Prisma.ProfessorTurmaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.post`: Exposes CRUD operations for the **Post** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Posts
    * const posts = await prisma.post.findMany()
    * ```
    */
  get post(): Prisma.PostDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.postArquivo`: Exposes CRUD operations for the **PostArquivo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PostArquivos
    * const postArquivos = await prisma.postArquivo.findMany()
    * ```
    */
  get postArquivo(): Prisma.PostArquivoDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.2
   * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Professor: 'Professor',
    Turma: 'Turma',
    ProfessorTurma: 'ProfessorTurma',
    Post: 'Post',
    PostArquivo: 'PostArquivo'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "professor" | "turma" | "professorTurma" | "post" | "postArquivo"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Professor: {
        payload: Prisma.$ProfessorPayload<ExtArgs>
        fields: Prisma.ProfessorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfessorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfessorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>
          }
          findFirst: {
            args: Prisma.ProfessorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfessorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>
          }
          findMany: {
            args: Prisma.ProfessorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>[]
          }
          create: {
            args: Prisma.ProfessorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>
          }
          createMany: {
            args: Prisma.ProfessorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfessorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>[]
          }
          delete: {
            args: Prisma.ProfessorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>
          }
          update: {
            args: Prisma.ProfessorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>
          }
          deleteMany: {
            args: Prisma.ProfessorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfessorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProfessorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>[]
          }
          upsert: {
            args: Prisma.ProfessorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>
          }
          aggregate: {
            args: Prisma.ProfessorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfessor>
          }
          groupBy: {
            args: Prisma.ProfessorGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfessorGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfessorCountArgs<ExtArgs>
            result: $Utils.Optional<ProfessorCountAggregateOutputType> | number
          }
        }
      }
      Turma: {
        payload: Prisma.$TurmaPayload<ExtArgs>
        fields: Prisma.TurmaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TurmaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TurmaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaPayload>
          }
          findFirst: {
            args: Prisma.TurmaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TurmaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaPayload>
          }
          findMany: {
            args: Prisma.TurmaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaPayload>[]
          }
          create: {
            args: Prisma.TurmaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaPayload>
          }
          createMany: {
            args: Prisma.TurmaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TurmaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaPayload>[]
          }
          delete: {
            args: Prisma.TurmaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaPayload>
          }
          update: {
            args: Prisma.TurmaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaPayload>
          }
          deleteMany: {
            args: Prisma.TurmaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TurmaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TurmaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaPayload>[]
          }
          upsert: {
            args: Prisma.TurmaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaPayload>
          }
          aggregate: {
            args: Prisma.TurmaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTurma>
          }
          groupBy: {
            args: Prisma.TurmaGroupByArgs<ExtArgs>
            result: $Utils.Optional<TurmaGroupByOutputType>[]
          }
          count: {
            args: Prisma.TurmaCountArgs<ExtArgs>
            result: $Utils.Optional<TurmaCountAggregateOutputType> | number
          }
        }
      }
      ProfessorTurma: {
        payload: Prisma.$ProfessorTurmaPayload<ExtArgs>
        fields: Prisma.ProfessorTurmaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfessorTurmaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorTurmaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfessorTurmaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorTurmaPayload>
          }
          findFirst: {
            args: Prisma.ProfessorTurmaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorTurmaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfessorTurmaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorTurmaPayload>
          }
          findMany: {
            args: Prisma.ProfessorTurmaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorTurmaPayload>[]
          }
          create: {
            args: Prisma.ProfessorTurmaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorTurmaPayload>
          }
          createMany: {
            args: Prisma.ProfessorTurmaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfessorTurmaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorTurmaPayload>[]
          }
          delete: {
            args: Prisma.ProfessorTurmaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorTurmaPayload>
          }
          update: {
            args: Prisma.ProfessorTurmaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorTurmaPayload>
          }
          deleteMany: {
            args: Prisma.ProfessorTurmaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfessorTurmaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProfessorTurmaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorTurmaPayload>[]
          }
          upsert: {
            args: Prisma.ProfessorTurmaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorTurmaPayload>
          }
          aggregate: {
            args: Prisma.ProfessorTurmaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfessorTurma>
          }
          groupBy: {
            args: Prisma.ProfessorTurmaGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfessorTurmaGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfessorTurmaCountArgs<ExtArgs>
            result: $Utils.Optional<ProfessorTurmaCountAggregateOutputType> | number
          }
        }
      }
      Post: {
        payload: Prisma.$PostPayload<ExtArgs>
        fields: Prisma.PostFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PostFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PostFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          findFirst: {
            args: Prisma.PostFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PostFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          findMany: {
            args: Prisma.PostFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          create: {
            args: Prisma.PostCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          createMany: {
            args: Prisma.PostCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PostCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          delete: {
            args: Prisma.PostDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          update: {
            args: Prisma.PostUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          deleteMany: {
            args: Prisma.PostDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PostUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PostUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          upsert: {
            args: Prisma.PostUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          aggregate: {
            args: Prisma.PostAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePost>
          }
          groupBy: {
            args: Prisma.PostGroupByArgs<ExtArgs>
            result: $Utils.Optional<PostGroupByOutputType>[]
          }
          count: {
            args: Prisma.PostCountArgs<ExtArgs>
            result: $Utils.Optional<PostCountAggregateOutputType> | number
          }
        }
      }
      PostArquivo: {
        payload: Prisma.$PostArquivoPayload<ExtArgs>
        fields: Prisma.PostArquivoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PostArquivoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostArquivoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PostArquivoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostArquivoPayload>
          }
          findFirst: {
            args: Prisma.PostArquivoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostArquivoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PostArquivoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostArquivoPayload>
          }
          findMany: {
            args: Prisma.PostArquivoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostArquivoPayload>[]
          }
          create: {
            args: Prisma.PostArquivoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostArquivoPayload>
          }
          createMany: {
            args: Prisma.PostArquivoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PostArquivoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostArquivoPayload>[]
          }
          delete: {
            args: Prisma.PostArquivoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostArquivoPayload>
          }
          update: {
            args: Prisma.PostArquivoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostArquivoPayload>
          }
          deleteMany: {
            args: Prisma.PostArquivoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PostArquivoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PostArquivoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostArquivoPayload>[]
          }
          upsert: {
            args: Prisma.PostArquivoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostArquivoPayload>
          }
          aggregate: {
            args: Prisma.PostArquivoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePostArquivo>
          }
          groupBy: {
            args: Prisma.PostArquivoGroupByArgs<ExtArgs>
            result: $Utils.Optional<PostArquivoGroupByOutputType>[]
          }
          count: {
            args: Prisma.PostArquivoCountArgs<ExtArgs>
            result: $Utils.Optional<PostArquivoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    professor?: ProfessorOmit
    turma?: TurmaOmit
    professorTurma?: ProfessorTurmaOmit
    post?: PostOmit
    postArquivo?: PostArquivoOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ProfessorCountOutputType
   */

  export type ProfessorCountOutputType = {
    posts: number
    turmas: number
  }

  export type ProfessorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    posts?: boolean | ProfessorCountOutputTypeCountPostsArgs
    turmas?: boolean | ProfessorCountOutputTypeCountTurmasArgs
  }

  // Custom InputTypes
  /**
   * ProfessorCountOutputType without action
   */
  export type ProfessorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessorCountOutputType
     */
    select?: ProfessorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProfessorCountOutputType without action
   */
  export type ProfessorCountOutputTypeCountPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
  }

  /**
   * ProfessorCountOutputType without action
   */
  export type ProfessorCountOutputTypeCountTurmasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessorTurmaWhereInput
  }


  /**
   * Count Type TurmaCountOutputType
   */

  export type TurmaCountOutputType = {
    posts: number
    professores: number
  }

  export type TurmaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    posts?: boolean | TurmaCountOutputTypeCountPostsArgs
    professores?: boolean | TurmaCountOutputTypeCountProfessoresArgs
  }

  // Custom InputTypes
  /**
   * TurmaCountOutputType without action
   */
  export type TurmaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaCountOutputType
     */
    select?: TurmaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TurmaCountOutputType without action
   */
  export type TurmaCountOutputTypeCountPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
  }

  /**
   * TurmaCountOutputType without action
   */
  export type TurmaCountOutputTypeCountProfessoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessorTurmaWhereInput
  }


  /**
   * Count Type PostCountOutputType
   */

  export type PostCountOutputType = {
    arquivos: number
  }

  export type PostCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    arquivos?: boolean | PostCountOutputTypeCountArquivosArgs
  }

  // Custom InputTypes
  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostCountOutputType
     */
    select?: PostCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountArquivosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostArquivoWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Professor
   */

  export type AggregateProfessor = {
    _count: ProfessorCountAggregateOutputType | null
    _avg: ProfessorAvgAggregateOutputType | null
    _sum: ProfessorSumAggregateOutputType | null
    _min: ProfessorMinAggregateOutputType | null
    _max: ProfessorMaxAggregateOutputType | null
  }

  export type ProfessorAvgAggregateOutputType = {
    id: number | null
  }

  export type ProfessorSumAggregateOutputType = {
    id: number | null
  }

  export type ProfessorMinAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    senha: string | null
    avatar: string | null
  }

  export type ProfessorMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    senha: string | null
    avatar: string | null
  }

  export type ProfessorCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    senha: number
    avatar: number
    _all: number
  }


  export type ProfessorAvgAggregateInputType = {
    id?: true
  }

  export type ProfessorSumAggregateInputType = {
    id?: true
  }

  export type ProfessorMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    avatar?: true
  }

  export type ProfessorMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    avatar?: true
  }

  export type ProfessorCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    avatar?: true
    _all?: true
  }

  export type ProfessorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Professor to aggregate.
     */
    where?: ProfessorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professors to fetch.
     */
    orderBy?: ProfessorOrderByWithRelationInput | ProfessorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfessorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Professors
    **/
    _count?: true | ProfessorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfessorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfessorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfessorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfessorMaxAggregateInputType
  }

  export type GetProfessorAggregateType<T extends ProfessorAggregateArgs> = {
        [P in keyof T & keyof AggregateProfessor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfessor[P]>
      : GetScalarType<T[P], AggregateProfessor[P]>
  }




  export type ProfessorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessorWhereInput
    orderBy?: ProfessorOrderByWithAggregationInput | ProfessorOrderByWithAggregationInput[]
    by: ProfessorScalarFieldEnum[] | ProfessorScalarFieldEnum
    having?: ProfessorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfessorCountAggregateInputType | true
    _avg?: ProfessorAvgAggregateInputType
    _sum?: ProfessorSumAggregateInputType
    _min?: ProfessorMinAggregateInputType
    _max?: ProfessorMaxAggregateInputType
  }

  export type ProfessorGroupByOutputType = {
    id: number
    nome: string
    email: string
    senha: string
    avatar: string | null
    _count: ProfessorCountAggregateOutputType | null
    _avg: ProfessorAvgAggregateOutputType | null
    _sum: ProfessorSumAggregateOutputType | null
    _min: ProfessorMinAggregateOutputType | null
    _max: ProfessorMaxAggregateOutputType | null
  }

  type GetProfessorGroupByPayload<T extends ProfessorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfessorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfessorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfessorGroupByOutputType[P]>
            : GetScalarType<T[P], ProfessorGroupByOutputType[P]>
        }
      >
    >


  export type ProfessorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    avatar?: boolean
    posts?: boolean | Professor$postsArgs<ExtArgs>
    turmas?: boolean | Professor$turmasArgs<ExtArgs>
    _count?: boolean | ProfessorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professor"]>

  export type ProfessorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    avatar?: boolean
  }, ExtArgs["result"]["professor"]>

  export type ProfessorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    avatar?: boolean
  }, ExtArgs["result"]["professor"]>

  export type ProfessorSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    avatar?: boolean
  }

  export type ProfessorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "email" | "senha" | "avatar", ExtArgs["result"]["professor"]>
  export type ProfessorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    posts?: boolean | Professor$postsArgs<ExtArgs>
    turmas?: boolean | Professor$turmasArgs<ExtArgs>
    _count?: boolean | ProfessorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProfessorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ProfessorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProfessorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Professor"
    objects: {
      posts: Prisma.$PostPayload<ExtArgs>[]
      turmas: Prisma.$ProfessorTurmaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      email: string
      senha: string
      avatar: string | null
    }, ExtArgs["result"]["professor"]>
    composites: {}
  }

  type ProfessorGetPayload<S extends boolean | null | undefined | ProfessorDefaultArgs> = $Result.GetResult<Prisma.$ProfessorPayload, S>

  type ProfessorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProfessorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfessorCountAggregateInputType | true
    }

  export interface ProfessorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Professor'], meta: { name: 'Professor' } }
    /**
     * Find zero or one Professor that matches the filter.
     * @param {ProfessorFindUniqueArgs} args - Arguments to find a Professor
     * @example
     * // Get one Professor
     * const professor = await prisma.professor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfessorFindUniqueArgs>(args: SelectSubset<T, ProfessorFindUniqueArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Professor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProfessorFindUniqueOrThrowArgs} args - Arguments to find a Professor
     * @example
     * // Get one Professor
     * const professor = await prisma.professor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfessorFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfessorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Professor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorFindFirstArgs} args - Arguments to find a Professor
     * @example
     * // Get one Professor
     * const professor = await prisma.professor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfessorFindFirstArgs>(args?: SelectSubset<T, ProfessorFindFirstArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Professor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorFindFirstOrThrowArgs} args - Arguments to find a Professor
     * @example
     * // Get one Professor
     * const professor = await prisma.professor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfessorFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfessorFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Professors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Professors
     * const professors = await prisma.professor.findMany()
     * 
     * // Get first 10 Professors
     * const professors = await prisma.professor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const professorWithIdOnly = await prisma.professor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfessorFindManyArgs>(args?: SelectSubset<T, ProfessorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Professor.
     * @param {ProfessorCreateArgs} args - Arguments to create a Professor.
     * @example
     * // Create one Professor
     * const Professor = await prisma.professor.create({
     *   data: {
     *     // ... data to create a Professor
     *   }
     * })
     * 
     */
    create<T extends ProfessorCreateArgs>(args: SelectSubset<T, ProfessorCreateArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Professors.
     * @param {ProfessorCreateManyArgs} args - Arguments to create many Professors.
     * @example
     * // Create many Professors
     * const professor = await prisma.professor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfessorCreateManyArgs>(args?: SelectSubset<T, ProfessorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Professors and returns the data saved in the database.
     * @param {ProfessorCreateManyAndReturnArgs} args - Arguments to create many Professors.
     * @example
     * // Create many Professors
     * const professor = await prisma.professor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Professors and only return the `id`
     * const professorWithIdOnly = await prisma.professor.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfessorCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfessorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Professor.
     * @param {ProfessorDeleteArgs} args - Arguments to delete one Professor.
     * @example
     * // Delete one Professor
     * const Professor = await prisma.professor.delete({
     *   where: {
     *     // ... filter to delete one Professor
     *   }
     * })
     * 
     */
    delete<T extends ProfessorDeleteArgs>(args: SelectSubset<T, ProfessorDeleteArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Professor.
     * @param {ProfessorUpdateArgs} args - Arguments to update one Professor.
     * @example
     * // Update one Professor
     * const professor = await prisma.professor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfessorUpdateArgs>(args: SelectSubset<T, ProfessorUpdateArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Professors.
     * @param {ProfessorDeleteManyArgs} args - Arguments to filter Professors to delete.
     * @example
     * // Delete a few Professors
     * const { count } = await prisma.professor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfessorDeleteManyArgs>(args?: SelectSubset<T, ProfessorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Professors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Professors
     * const professor = await prisma.professor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfessorUpdateManyArgs>(args: SelectSubset<T, ProfessorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Professors and returns the data updated in the database.
     * @param {ProfessorUpdateManyAndReturnArgs} args - Arguments to update many Professors.
     * @example
     * // Update many Professors
     * const professor = await prisma.professor.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Professors and only return the `id`
     * const professorWithIdOnly = await prisma.professor.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProfessorUpdateManyAndReturnArgs>(args: SelectSubset<T, ProfessorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Professor.
     * @param {ProfessorUpsertArgs} args - Arguments to update or create a Professor.
     * @example
     * // Update or create a Professor
     * const professor = await prisma.professor.upsert({
     *   create: {
     *     // ... data to create a Professor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Professor we want to update
     *   }
     * })
     */
    upsert<T extends ProfessorUpsertArgs>(args: SelectSubset<T, ProfessorUpsertArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Professors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorCountArgs} args - Arguments to filter Professors to count.
     * @example
     * // Count the number of Professors
     * const count = await prisma.professor.count({
     *   where: {
     *     // ... the filter for the Professors we want to count
     *   }
     * })
    **/
    count<T extends ProfessorCountArgs>(
      args?: Subset<T, ProfessorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfessorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Professor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfessorAggregateArgs>(args: Subset<T, ProfessorAggregateArgs>): Prisma.PrismaPromise<GetProfessorAggregateType<T>>

    /**
     * Group by Professor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfessorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfessorGroupByArgs['orderBy'] }
        : { orderBy?: ProfessorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfessorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfessorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Professor model
   */
  readonly fields: ProfessorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Professor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfessorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    posts<T extends Professor$postsArgs<ExtArgs> = {}>(args?: Subset<T, Professor$postsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    turmas<T extends Professor$turmasArgs<ExtArgs> = {}>(args?: Subset<T, Professor$turmasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessorTurmaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Professor model
   */
  interface ProfessorFieldRefs {
    readonly id: FieldRef<"Professor", 'Int'>
    readonly nome: FieldRef<"Professor", 'String'>
    readonly email: FieldRef<"Professor", 'String'>
    readonly senha: FieldRef<"Professor", 'String'>
    readonly avatar: FieldRef<"Professor", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Professor findUnique
   */
  export type ProfessorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professor
     */
    omit?: ProfessorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * Filter, which Professor to fetch.
     */
    where: ProfessorWhereUniqueInput
  }

  /**
   * Professor findUniqueOrThrow
   */
  export type ProfessorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professor
     */
    omit?: ProfessorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * Filter, which Professor to fetch.
     */
    where: ProfessorWhereUniqueInput
  }

  /**
   * Professor findFirst
   */
  export type ProfessorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professor
     */
    omit?: ProfessorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * Filter, which Professor to fetch.
     */
    where?: ProfessorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professors to fetch.
     */
    orderBy?: ProfessorOrderByWithRelationInput | ProfessorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Professors.
     */
    cursor?: ProfessorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Professors.
     */
    distinct?: ProfessorScalarFieldEnum | ProfessorScalarFieldEnum[]
  }

  /**
   * Professor findFirstOrThrow
   */
  export type ProfessorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professor
     */
    omit?: ProfessorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * Filter, which Professor to fetch.
     */
    where?: ProfessorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professors to fetch.
     */
    orderBy?: ProfessorOrderByWithRelationInput | ProfessorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Professors.
     */
    cursor?: ProfessorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Professors.
     */
    distinct?: ProfessorScalarFieldEnum | ProfessorScalarFieldEnum[]
  }

  /**
   * Professor findMany
   */
  export type ProfessorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professor
     */
    omit?: ProfessorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * Filter, which Professors to fetch.
     */
    where?: ProfessorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professors to fetch.
     */
    orderBy?: ProfessorOrderByWithRelationInput | ProfessorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Professors.
     */
    cursor?: ProfessorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professors.
     */
    skip?: number
    distinct?: ProfessorScalarFieldEnum | ProfessorScalarFieldEnum[]
  }

  /**
   * Professor create
   */
  export type ProfessorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professor
     */
    omit?: ProfessorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * The data needed to create a Professor.
     */
    data: XOR<ProfessorCreateInput, ProfessorUncheckedCreateInput>
  }

  /**
   * Professor createMany
   */
  export type ProfessorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Professors.
     */
    data: ProfessorCreateManyInput | ProfessorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Professor createManyAndReturn
   */
  export type ProfessorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Professor
     */
    omit?: ProfessorOmit<ExtArgs> | null
    /**
     * The data used to create many Professors.
     */
    data: ProfessorCreateManyInput | ProfessorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Professor update
   */
  export type ProfessorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professor
     */
    omit?: ProfessorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * The data needed to update a Professor.
     */
    data: XOR<ProfessorUpdateInput, ProfessorUncheckedUpdateInput>
    /**
     * Choose, which Professor to update.
     */
    where: ProfessorWhereUniqueInput
  }

  /**
   * Professor updateMany
   */
  export type ProfessorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Professors.
     */
    data: XOR<ProfessorUpdateManyMutationInput, ProfessorUncheckedUpdateManyInput>
    /**
     * Filter which Professors to update
     */
    where?: ProfessorWhereInput
    /**
     * Limit how many Professors to update.
     */
    limit?: number
  }

  /**
   * Professor updateManyAndReturn
   */
  export type ProfessorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Professor
     */
    omit?: ProfessorOmit<ExtArgs> | null
    /**
     * The data used to update Professors.
     */
    data: XOR<ProfessorUpdateManyMutationInput, ProfessorUncheckedUpdateManyInput>
    /**
     * Filter which Professors to update
     */
    where?: ProfessorWhereInput
    /**
     * Limit how many Professors to update.
     */
    limit?: number
  }

  /**
   * Professor upsert
   */
  export type ProfessorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professor
     */
    omit?: ProfessorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * The filter to search for the Professor to update in case it exists.
     */
    where: ProfessorWhereUniqueInput
    /**
     * In case the Professor found by the `where` argument doesn't exist, create a new Professor with this data.
     */
    create: XOR<ProfessorCreateInput, ProfessorUncheckedCreateInput>
    /**
     * In case the Professor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfessorUpdateInput, ProfessorUncheckedUpdateInput>
  }

  /**
   * Professor delete
   */
  export type ProfessorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professor
     */
    omit?: ProfessorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * Filter which Professor to delete.
     */
    where: ProfessorWhereUniqueInput
  }

  /**
   * Professor deleteMany
   */
  export type ProfessorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Professors to delete
     */
    where?: ProfessorWhereInput
    /**
     * Limit how many Professors to delete.
     */
    limit?: number
  }

  /**
   * Professor.posts
   */
  export type Professor$postsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    where?: PostWhereInput
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    cursor?: PostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Professor.turmas
   */
  export type Professor$turmasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessorTurma
     */
    select?: ProfessorTurmaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessorTurma
     */
    omit?: ProfessorTurmaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorTurmaInclude<ExtArgs> | null
    where?: ProfessorTurmaWhereInput
    orderBy?: ProfessorTurmaOrderByWithRelationInput | ProfessorTurmaOrderByWithRelationInput[]
    cursor?: ProfessorTurmaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfessorTurmaScalarFieldEnum | ProfessorTurmaScalarFieldEnum[]
  }

  /**
   * Professor without action
   */
  export type ProfessorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professor
     */
    omit?: ProfessorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
  }


  /**
   * Model Turma
   */

  export type AggregateTurma = {
    _count: TurmaCountAggregateOutputType | null
    _avg: TurmaAvgAggregateOutputType | null
    _sum: TurmaSumAggregateOutputType | null
    _min: TurmaMinAggregateOutputType | null
    _max: TurmaMaxAggregateOutputType | null
  }

  export type TurmaAvgAggregateOutputType = {
    id: number | null
  }

  export type TurmaSumAggregateOutputType = {
    id: number | null
  }

  export type TurmaMinAggregateOutputType = {
    id: number | null
    nome: string | null
    icon: string | null
  }

  export type TurmaMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    icon: string | null
  }

  export type TurmaCountAggregateOutputType = {
    id: number
    nome: number
    icon: number
    _all: number
  }


  export type TurmaAvgAggregateInputType = {
    id?: true
  }

  export type TurmaSumAggregateInputType = {
    id?: true
  }

  export type TurmaMinAggregateInputType = {
    id?: true
    nome?: true
    icon?: true
  }

  export type TurmaMaxAggregateInputType = {
    id?: true
    nome?: true
    icon?: true
  }

  export type TurmaCountAggregateInputType = {
    id?: true
    nome?: true
    icon?: true
    _all?: true
  }

  export type TurmaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Turma to aggregate.
     */
    where?: TurmaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Turmas to fetch.
     */
    orderBy?: TurmaOrderByWithRelationInput | TurmaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TurmaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Turmas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Turmas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Turmas
    **/
    _count?: true | TurmaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TurmaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TurmaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TurmaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TurmaMaxAggregateInputType
  }

  export type GetTurmaAggregateType<T extends TurmaAggregateArgs> = {
        [P in keyof T & keyof AggregateTurma]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTurma[P]>
      : GetScalarType<T[P], AggregateTurma[P]>
  }




  export type TurmaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TurmaWhereInput
    orderBy?: TurmaOrderByWithAggregationInput | TurmaOrderByWithAggregationInput[]
    by: TurmaScalarFieldEnum[] | TurmaScalarFieldEnum
    having?: TurmaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TurmaCountAggregateInputType | true
    _avg?: TurmaAvgAggregateInputType
    _sum?: TurmaSumAggregateInputType
    _min?: TurmaMinAggregateInputType
    _max?: TurmaMaxAggregateInputType
  }

  export type TurmaGroupByOutputType = {
    id: number
    nome: string
    icon: string | null
    _count: TurmaCountAggregateOutputType | null
    _avg: TurmaAvgAggregateOutputType | null
    _sum: TurmaSumAggregateOutputType | null
    _min: TurmaMinAggregateOutputType | null
    _max: TurmaMaxAggregateOutputType | null
  }

  type GetTurmaGroupByPayload<T extends TurmaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TurmaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TurmaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TurmaGroupByOutputType[P]>
            : GetScalarType<T[P], TurmaGroupByOutputType[P]>
        }
      >
    >


  export type TurmaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    icon?: boolean
    posts?: boolean | Turma$postsArgs<ExtArgs>
    professores?: boolean | Turma$professoresArgs<ExtArgs>
    _count?: boolean | TurmaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["turma"]>

  export type TurmaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    icon?: boolean
  }, ExtArgs["result"]["turma"]>

  export type TurmaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    icon?: boolean
  }, ExtArgs["result"]["turma"]>

  export type TurmaSelectScalar = {
    id?: boolean
    nome?: boolean
    icon?: boolean
  }

  export type TurmaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "icon", ExtArgs["result"]["turma"]>
  export type TurmaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    posts?: boolean | Turma$postsArgs<ExtArgs>
    professores?: boolean | Turma$professoresArgs<ExtArgs>
    _count?: boolean | TurmaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TurmaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type TurmaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TurmaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Turma"
    objects: {
      posts: Prisma.$PostPayload<ExtArgs>[]
      professores: Prisma.$ProfessorTurmaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      icon: string | null
    }, ExtArgs["result"]["turma"]>
    composites: {}
  }

  type TurmaGetPayload<S extends boolean | null | undefined | TurmaDefaultArgs> = $Result.GetResult<Prisma.$TurmaPayload, S>

  type TurmaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TurmaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TurmaCountAggregateInputType | true
    }

  export interface TurmaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Turma'], meta: { name: 'Turma' } }
    /**
     * Find zero or one Turma that matches the filter.
     * @param {TurmaFindUniqueArgs} args - Arguments to find a Turma
     * @example
     * // Get one Turma
     * const turma = await prisma.turma.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TurmaFindUniqueArgs>(args: SelectSubset<T, TurmaFindUniqueArgs<ExtArgs>>): Prisma__TurmaClient<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Turma that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TurmaFindUniqueOrThrowArgs} args - Arguments to find a Turma
     * @example
     * // Get one Turma
     * const turma = await prisma.turma.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TurmaFindUniqueOrThrowArgs>(args: SelectSubset<T, TurmaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TurmaClient<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Turma that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaFindFirstArgs} args - Arguments to find a Turma
     * @example
     * // Get one Turma
     * const turma = await prisma.turma.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TurmaFindFirstArgs>(args?: SelectSubset<T, TurmaFindFirstArgs<ExtArgs>>): Prisma__TurmaClient<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Turma that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaFindFirstOrThrowArgs} args - Arguments to find a Turma
     * @example
     * // Get one Turma
     * const turma = await prisma.turma.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TurmaFindFirstOrThrowArgs>(args?: SelectSubset<T, TurmaFindFirstOrThrowArgs<ExtArgs>>): Prisma__TurmaClient<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Turmas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Turmas
     * const turmas = await prisma.turma.findMany()
     * 
     * // Get first 10 Turmas
     * const turmas = await prisma.turma.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const turmaWithIdOnly = await prisma.turma.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TurmaFindManyArgs>(args?: SelectSubset<T, TurmaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Turma.
     * @param {TurmaCreateArgs} args - Arguments to create a Turma.
     * @example
     * // Create one Turma
     * const Turma = await prisma.turma.create({
     *   data: {
     *     // ... data to create a Turma
     *   }
     * })
     * 
     */
    create<T extends TurmaCreateArgs>(args: SelectSubset<T, TurmaCreateArgs<ExtArgs>>): Prisma__TurmaClient<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Turmas.
     * @param {TurmaCreateManyArgs} args - Arguments to create many Turmas.
     * @example
     * // Create many Turmas
     * const turma = await prisma.turma.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TurmaCreateManyArgs>(args?: SelectSubset<T, TurmaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Turmas and returns the data saved in the database.
     * @param {TurmaCreateManyAndReturnArgs} args - Arguments to create many Turmas.
     * @example
     * // Create many Turmas
     * const turma = await prisma.turma.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Turmas and only return the `id`
     * const turmaWithIdOnly = await prisma.turma.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TurmaCreateManyAndReturnArgs>(args?: SelectSubset<T, TurmaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Turma.
     * @param {TurmaDeleteArgs} args - Arguments to delete one Turma.
     * @example
     * // Delete one Turma
     * const Turma = await prisma.turma.delete({
     *   where: {
     *     // ... filter to delete one Turma
     *   }
     * })
     * 
     */
    delete<T extends TurmaDeleteArgs>(args: SelectSubset<T, TurmaDeleteArgs<ExtArgs>>): Prisma__TurmaClient<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Turma.
     * @param {TurmaUpdateArgs} args - Arguments to update one Turma.
     * @example
     * // Update one Turma
     * const turma = await prisma.turma.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TurmaUpdateArgs>(args: SelectSubset<T, TurmaUpdateArgs<ExtArgs>>): Prisma__TurmaClient<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Turmas.
     * @param {TurmaDeleteManyArgs} args - Arguments to filter Turmas to delete.
     * @example
     * // Delete a few Turmas
     * const { count } = await prisma.turma.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TurmaDeleteManyArgs>(args?: SelectSubset<T, TurmaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Turmas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Turmas
     * const turma = await prisma.turma.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TurmaUpdateManyArgs>(args: SelectSubset<T, TurmaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Turmas and returns the data updated in the database.
     * @param {TurmaUpdateManyAndReturnArgs} args - Arguments to update many Turmas.
     * @example
     * // Update many Turmas
     * const turma = await prisma.turma.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Turmas and only return the `id`
     * const turmaWithIdOnly = await prisma.turma.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TurmaUpdateManyAndReturnArgs>(args: SelectSubset<T, TurmaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Turma.
     * @param {TurmaUpsertArgs} args - Arguments to update or create a Turma.
     * @example
     * // Update or create a Turma
     * const turma = await prisma.turma.upsert({
     *   create: {
     *     // ... data to create a Turma
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Turma we want to update
     *   }
     * })
     */
    upsert<T extends TurmaUpsertArgs>(args: SelectSubset<T, TurmaUpsertArgs<ExtArgs>>): Prisma__TurmaClient<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Turmas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaCountArgs} args - Arguments to filter Turmas to count.
     * @example
     * // Count the number of Turmas
     * const count = await prisma.turma.count({
     *   where: {
     *     // ... the filter for the Turmas we want to count
     *   }
     * })
    **/
    count<T extends TurmaCountArgs>(
      args?: Subset<T, TurmaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TurmaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Turma.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TurmaAggregateArgs>(args: Subset<T, TurmaAggregateArgs>): Prisma.PrismaPromise<GetTurmaAggregateType<T>>

    /**
     * Group by Turma.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TurmaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TurmaGroupByArgs['orderBy'] }
        : { orderBy?: TurmaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TurmaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTurmaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Turma model
   */
  readonly fields: TurmaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Turma.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TurmaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    posts<T extends Turma$postsArgs<ExtArgs> = {}>(args?: Subset<T, Turma$postsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    professores<T extends Turma$professoresArgs<ExtArgs> = {}>(args?: Subset<T, Turma$professoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessorTurmaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Turma model
   */
  interface TurmaFieldRefs {
    readonly id: FieldRef<"Turma", 'Int'>
    readonly nome: FieldRef<"Turma", 'String'>
    readonly icon: FieldRef<"Turma", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Turma findUnique
   */
  export type TurmaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Turma
     */
    omit?: TurmaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaInclude<ExtArgs> | null
    /**
     * Filter, which Turma to fetch.
     */
    where: TurmaWhereUniqueInput
  }

  /**
   * Turma findUniqueOrThrow
   */
  export type TurmaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Turma
     */
    omit?: TurmaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaInclude<ExtArgs> | null
    /**
     * Filter, which Turma to fetch.
     */
    where: TurmaWhereUniqueInput
  }

  /**
   * Turma findFirst
   */
  export type TurmaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Turma
     */
    omit?: TurmaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaInclude<ExtArgs> | null
    /**
     * Filter, which Turma to fetch.
     */
    where?: TurmaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Turmas to fetch.
     */
    orderBy?: TurmaOrderByWithRelationInput | TurmaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Turmas.
     */
    cursor?: TurmaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Turmas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Turmas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Turmas.
     */
    distinct?: TurmaScalarFieldEnum | TurmaScalarFieldEnum[]
  }

  /**
   * Turma findFirstOrThrow
   */
  export type TurmaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Turma
     */
    omit?: TurmaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaInclude<ExtArgs> | null
    /**
     * Filter, which Turma to fetch.
     */
    where?: TurmaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Turmas to fetch.
     */
    orderBy?: TurmaOrderByWithRelationInput | TurmaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Turmas.
     */
    cursor?: TurmaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Turmas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Turmas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Turmas.
     */
    distinct?: TurmaScalarFieldEnum | TurmaScalarFieldEnum[]
  }

  /**
   * Turma findMany
   */
  export type TurmaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Turma
     */
    omit?: TurmaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaInclude<ExtArgs> | null
    /**
     * Filter, which Turmas to fetch.
     */
    where?: TurmaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Turmas to fetch.
     */
    orderBy?: TurmaOrderByWithRelationInput | TurmaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Turmas.
     */
    cursor?: TurmaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Turmas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Turmas.
     */
    skip?: number
    distinct?: TurmaScalarFieldEnum | TurmaScalarFieldEnum[]
  }

  /**
   * Turma create
   */
  export type TurmaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Turma
     */
    omit?: TurmaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaInclude<ExtArgs> | null
    /**
     * The data needed to create a Turma.
     */
    data: XOR<TurmaCreateInput, TurmaUncheckedCreateInput>
  }

  /**
   * Turma createMany
   */
  export type TurmaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Turmas.
     */
    data: TurmaCreateManyInput | TurmaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Turma createManyAndReturn
   */
  export type TurmaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Turma
     */
    omit?: TurmaOmit<ExtArgs> | null
    /**
     * The data used to create many Turmas.
     */
    data: TurmaCreateManyInput | TurmaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Turma update
   */
  export type TurmaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Turma
     */
    omit?: TurmaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaInclude<ExtArgs> | null
    /**
     * The data needed to update a Turma.
     */
    data: XOR<TurmaUpdateInput, TurmaUncheckedUpdateInput>
    /**
     * Choose, which Turma to update.
     */
    where: TurmaWhereUniqueInput
  }

  /**
   * Turma updateMany
   */
  export type TurmaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Turmas.
     */
    data: XOR<TurmaUpdateManyMutationInput, TurmaUncheckedUpdateManyInput>
    /**
     * Filter which Turmas to update
     */
    where?: TurmaWhereInput
    /**
     * Limit how many Turmas to update.
     */
    limit?: number
  }

  /**
   * Turma updateManyAndReturn
   */
  export type TurmaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Turma
     */
    omit?: TurmaOmit<ExtArgs> | null
    /**
     * The data used to update Turmas.
     */
    data: XOR<TurmaUpdateManyMutationInput, TurmaUncheckedUpdateManyInput>
    /**
     * Filter which Turmas to update
     */
    where?: TurmaWhereInput
    /**
     * Limit how many Turmas to update.
     */
    limit?: number
  }

  /**
   * Turma upsert
   */
  export type TurmaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Turma
     */
    omit?: TurmaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaInclude<ExtArgs> | null
    /**
     * The filter to search for the Turma to update in case it exists.
     */
    where: TurmaWhereUniqueInput
    /**
     * In case the Turma found by the `where` argument doesn't exist, create a new Turma with this data.
     */
    create: XOR<TurmaCreateInput, TurmaUncheckedCreateInput>
    /**
     * In case the Turma was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TurmaUpdateInput, TurmaUncheckedUpdateInput>
  }

  /**
   * Turma delete
   */
  export type TurmaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Turma
     */
    omit?: TurmaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaInclude<ExtArgs> | null
    /**
     * Filter which Turma to delete.
     */
    where: TurmaWhereUniqueInput
  }

  /**
   * Turma deleteMany
   */
  export type TurmaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Turmas to delete
     */
    where?: TurmaWhereInput
    /**
     * Limit how many Turmas to delete.
     */
    limit?: number
  }

  /**
   * Turma.posts
   */
  export type Turma$postsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    where?: PostWhereInput
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    cursor?: PostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Turma.professores
   */
  export type Turma$professoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessorTurma
     */
    select?: ProfessorTurmaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessorTurma
     */
    omit?: ProfessorTurmaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorTurmaInclude<ExtArgs> | null
    where?: ProfessorTurmaWhereInput
    orderBy?: ProfessorTurmaOrderByWithRelationInput | ProfessorTurmaOrderByWithRelationInput[]
    cursor?: ProfessorTurmaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfessorTurmaScalarFieldEnum | ProfessorTurmaScalarFieldEnum[]
  }

  /**
   * Turma without action
   */
  export type TurmaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Turma
     */
    omit?: TurmaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaInclude<ExtArgs> | null
  }


  /**
   * Model ProfessorTurma
   */

  export type AggregateProfessorTurma = {
    _count: ProfessorTurmaCountAggregateOutputType | null
    _avg: ProfessorTurmaAvgAggregateOutputType | null
    _sum: ProfessorTurmaSumAggregateOutputType | null
    _min: ProfessorTurmaMinAggregateOutputType | null
    _max: ProfessorTurmaMaxAggregateOutputType | null
  }

  export type ProfessorTurmaAvgAggregateOutputType = {
    professor_id: number | null
    turma_id: number | null
  }

  export type ProfessorTurmaSumAggregateOutputType = {
    professor_id: number | null
    turma_id: number | null
  }

  export type ProfessorTurmaMinAggregateOutputType = {
    professor_id: number | null
    turma_id: number | null
  }

  export type ProfessorTurmaMaxAggregateOutputType = {
    professor_id: number | null
    turma_id: number | null
  }

  export type ProfessorTurmaCountAggregateOutputType = {
    professor_id: number
    turma_id: number
    _all: number
  }


  export type ProfessorTurmaAvgAggregateInputType = {
    professor_id?: true
    turma_id?: true
  }

  export type ProfessorTurmaSumAggregateInputType = {
    professor_id?: true
    turma_id?: true
  }

  export type ProfessorTurmaMinAggregateInputType = {
    professor_id?: true
    turma_id?: true
  }

  export type ProfessorTurmaMaxAggregateInputType = {
    professor_id?: true
    turma_id?: true
  }

  export type ProfessorTurmaCountAggregateInputType = {
    professor_id?: true
    turma_id?: true
    _all?: true
  }

  export type ProfessorTurmaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfessorTurma to aggregate.
     */
    where?: ProfessorTurmaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessorTurmas to fetch.
     */
    orderBy?: ProfessorTurmaOrderByWithRelationInput | ProfessorTurmaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfessorTurmaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessorTurmas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessorTurmas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProfessorTurmas
    **/
    _count?: true | ProfessorTurmaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfessorTurmaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfessorTurmaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfessorTurmaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfessorTurmaMaxAggregateInputType
  }

  export type GetProfessorTurmaAggregateType<T extends ProfessorTurmaAggregateArgs> = {
        [P in keyof T & keyof AggregateProfessorTurma]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfessorTurma[P]>
      : GetScalarType<T[P], AggregateProfessorTurma[P]>
  }




  export type ProfessorTurmaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessorTurmaWhereInput
    orderBy?: ProfessorTurmaOrderByWithAggregationInput | ProfessorTurmaOrderByWithAggregationInput[]
    by: ProfessorTurmaScalarFieldEnum[] | ProfessorTurmaScalarFieldEnum
    having?: ProfessorTurmaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfessorTurmaCountAggregateInputType | true
    _avg?: ProfessorTurmaAvgAggregateInputType
    _sum?: ProfessorTurmaSumAggregateInputType
    _min?: ProfessorTurmaMinAggregateInputType
    _max?: ProfessorTurmaMaxAggregateInputType
  }

  export type ProfessorTurmaGroupByOutputType = {
    professor_id: number
    turma_id: number
    _count: ProfessorTurmaCountAggregateOutputType | null
    _avg: ProfessorTurmaAvgAggregateOutputType | null
    _sum: ProfessorTurmaSumAggregateOutputType | null
    _min: ProfessorTurmaMinAggregateOutputType | null
    _max: ProfessorTurmaMaxAggregateOutputType | null
  }

  type GetProfessorTurmaGroupByPayload<T extends ProfessorTurmaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfessorTurmaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfessorTurmaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfessorTurmaGroupByOutputType[P]>
            : GetScalarType<T[P], ProfessorTurmaGroupByOutputType[P]>
        }
      >
    >


  export type ProfessorTurmaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    professor_id?: boolean
    turma_id?: boolean
    professor?: boolean | ProfessorDefaultArgs<ExtArgs>
    turma?: boolean | TurmaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professorTurma"]>

  export type ProfessorTurmaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    professor_id?: boolean
    turma_id?: boolean
    professor?: boolean | ProfessorDefaultArgs<ExtArgs>
    turma?: boolean | TurmaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professorTurma"]>

  export type ProfessorTurmaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    professor_id?: boolean
    turma_id?: boolean
    professor?: boolean | ProfessorDefaultArgs<ExtArgs>
    turma?: boolean | TurmaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professorTurma"]>

  export type ProfessorTurmaSelectScalar = {
    professor_id?: boolean
    turma_id?: boolean
  }

  export type ProfessorTurmaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"professor_id" | "turma_id", ExtArgs["result"]["professorTurma"]>
  export type ProfessorTurmaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    professor?: boolean | ProfessorDefaultArgs<ExtArgs>
    turma?: boolean | TurmaDefaultArgs<ExtArgs>
  }
  export type ProfessorTurmaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    professor?: boolean | ProfessorDefaultArgs<ExtArgs>
    turma?: boolean | TurmaDefaultArgs<ExtArgs>
  }
  export type ProfessorTurmaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    professor?: boolean | ProfessorDefaultArgs<ExtArgs>
    turma?: boolean | TurmaDefaultArgs<ExtArgs>
  }

  export type $ProfessorTurmaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProfessorTurma"
    objects: {
      professor: Prisma.$ProfessorPayload<ExtArgs>
      turma: Prisma.$TurmaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      professor_id: number
      turma_id: number
    }, ExtArgs["result"]["professorTurma"]>
    composites: {}
  }

  type ProfessorTurmaGetPayload<S extends boolean | null | undefined | ProfessorTurmaDefaultArgs> = $Result.GetResult<Prisma.$ProfessorTurmaPayload, S>

  type ProfessorTurmaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProfessorTurmaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfessorTurmaCountAggregateInputType | true
    }

  export interface ProfessorTurmaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProfessorTurma'], meta: { name: 'ProfessorTurma' } }
    /**
     * Find zero or one ProfessorTurma that matches the filter.
     * @param {ProfessorTurmaFindUniqueArgs} args - Arguments to find a ProfessorTurma
     * @example
     * // Get one ProfessorTurma
     * const professorTurma = await prisma.professorTurma.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfessorTurmaFindUniqueArgs>(args: SelectSubset<T, ProfessorTurmaFindUniqueArgs<ExtArgs>>): Prisma__ProfessorTurmaClient<$Result.GetResult<Prisma.$ProfessorTurmaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProfessorTurma that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProfessorTurmaFindUniqueOrThrowArgs} args - Arguments to find a ProfessorTurma
     * @example
     * // Get one ProfessorTurma
     * const professorTurma = await prisma.professorTurma.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfessorTurmaFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfessorTurmaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfessorTurmaClient<$Result.GetResult<Prisma.$ProfessorTurmaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProfessorTurma that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorTurmaFindFirstArgs} args - Arguments to find a ProfessorTurma
     * @example
     * // Get one ProfessorTurma
     * const professorTurma = await prisma.professorTurma.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfessorTurmaFindFirstArgs>(args?: SelectSubset<T, ProfessorTurmaFindFirstArgs<ExtArgs>>): Prisma__ProfessorTurmaClient<$Result.GetResult<Prisma.$ProfessorTurmaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProfessorTurma that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorTurmaFindFirstOrThrowArgs} args - Arguments to find a ProfessorTurma
     * @example
     * // Get one ProfessorTurma
     * const professorTurma = await prisma.professorTurma.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfessorTurmaFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfessorTurmaFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfessorTurmaClient<$Result.GetResult<Prisma.$ProfessorTurmaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProfessorTurmas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorTurmaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProfessorTurmas
     * const professorTurmas = await prisma.professorTurma.findMany()
     * 
     * // Get first 10 ProfessorTurmas
     * const professorTurmas = await prisma.professorTurma.findMany({ take: 10 })
     * 
     * // Only select the `professor_id`
     * const professorTurmaWithProfessor_idOnly = await prisma.professorTurma.findMany({ select: { professor_id: true } })
     * 
     */
    findMany<T extends ProfessorTurmaFindManyArgs>(args?: SelectSubset<T, ProfessorTurmaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessorTurmaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProfessorTurma.
     * @param {ProfessorTurmaCreateArgs} args - Arguments to create a ProfessorTurma.
     * @example
     * // Create one ProfessorTurma
     * const ProfessorTurma = await prisma.professorTurma.create({
     *   data: {
     *     // ... data to create a ProfessorTurma
     *   }
     * })
     * 
     */
    create<T extends ProfessorTurmaCreateArgs>(args: SelectSubset<T, ProfessorTurmaCreateArgs<ExtArgs>>): Prisma__ProfessorTurmaClient<$Result.GetResult<Prisma.$ProfessorTurmaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProfessorTurmas.
     * @param {ProfessorTurmaCreateManyArgs} args - Arguments to create many ProfessorTurmas.
     * @example
     * // Create many ProfessorTurmas
     * const professorTurma = await prisma.professorTurma.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfessorTurmaCreateManyArgs>(args?: SelectSubset<T, ProfessorTurmaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProfessorTurmas and returns the data saved in the database.
     * @param {ProfessorTurmaCreateManyAndReturnArgs} args - Arguments to create many ProfessorTurmas.
     * @example
     * // Create many ProfessorTurmas
     * const professorTurma = await prisma.professorTurma.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProfessorTurmas and only return the `professor_id`
     * const professorTurmaWithProfessor_idOnly = await prisma.professorTurma.createManyAndReturn({
     *   select: { professor_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfessorTurmaCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfessorTurmaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessorTurmaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProfessorTurma.
     * @param {ProfessorTurmaDeleteArgs} args - Arguments to delete one ProfessorTurma.
     * @example
     * // Delete one ProfessorTurma
     * const ProfessorTurma = await prisma.professorTurma.delete({
     *   where: {
     *     // ... filter to delete one ProfessorTurma
     *   }
     * })
     * 
     */
    delete<T extends ProfessorTurmaDeleteArgs>(args: SelectSubset<T, ProfessorTurmaDeleteArgs<ExtArgs>>): Prisma__ProfessorTurmaClient<$Result.GetResult<Prisma.$ProfessorTurmaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProfessorTurma.
     * @param {ProfessorTurmaUpdateArgs} args - Arguments to update one ProfessorTurma.
     * @example
     * // Update one ProfessorTurma
     * const professorTurma = await prisma.professorTurma.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfessorTurmaUpdateArgs>(args: SelectSubset<T, ProfessorTurmaUpdateArgs<ExtArgs>>): Prisma__ProfessorTurmaClient<$Result.GetResult<Prisma.$ProfessorTurmaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProfessorTurmas.
     * @param {ProfessorTurmaDeleteManyArgs} args - Arguments to filter ProfessorTurmas to delete.
     * @example
     * // Delete a few ProfessorTurmas
     * const { count } = await prisma.professorTurma.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfessorTurmaDeleteManyArgs>(args?: SelectSubset<T, ProfessorTurmaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProfessorTurmas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorTurmaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProfessorTurmas
     * const professorTurma = await prisma.professorTurma.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfessorTurmaUpdateManyArgs>(args: SelectSubset<T, ProfessorTurmaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProfessorTurmas and returns the data updated in the database.
     * @param {ProfessorTurmaUpdateManyAndReturnArgs} args - Arguments to update many ProfessorTurmas.
     * @example
     * // Update many ProfessorTurmas
     * const professorTurma = await prisma.professorTurma.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProfessorTurmas and only return the `professor_id`
     * const professorTurmaWithProfessor_idOnly = await prisma.professorTurma.updateManyAndReturn({
     *   select: { professor_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProfessorTurmaUpdateManyAndReturnArgs>(args: SelectSubset<T, ProfessorTurmaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessorTurmaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProfessorTurma.
     * @param {ProfessorTurmaUpsertArgs} args - Arguments to update or create a ProfessorTurma.
     * @example
     * // Update or create a ProfessorTurma
     * const professorTurma = await prisma.professorTurma.upsert({
     *   create: {
     *     // ... data to create a ProfessorTurma
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProfessorTurma we want to update
     *   }
     * })
     */
    upsert<T extends ProfessorTurmaUpsertArgs>(args: SelectSubset<T, ProfessorTurmaUpsertArgs<ExtArgs>>): Prisma__ProfessorTurmaClient<$Result.GetResult<Prisma.$ProfessorTurmaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProfessorTurmas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorTurmaCountArgs} args - Arguments to filter ProfessorTurmas to count.
     * @example
     * // Count the number of ProfessorTurmas
     * const count = await prisma.professorTurma.count({
     *   where: {
     *     // ... the filter for the ProfessorTurmas we want to count
     *   }
     * })
    **/
    count<T extends ProfessorTurmaCountArgs>(
      args?: Subset<T, ProfessorTurmaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfessorTurmaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProfessorTurma.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorTurmaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfessorTurmaAggregateArgs>(args: Subset<T, ProfessorTurmaAggregateArgs>): Prisma.PrismaPromise<GetProfessorTurmaAggregateType<T>>

    /**
     * Group by ProfessorTurma.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorTurmaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfessorTurmaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfessorTurmaGroupByArgs['orderBy'] }
        : { orderBy?: ProfessorTurmaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfessorTurmaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfessorTurmaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProfessorTurma model
   */
  readonly fields: ProfessorTurmaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProfessorTurma.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfessorTurmaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    professor<T extends ProfessorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfessorDefaultArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    turma<T extends TurmaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TurmaDefaultArgs<ExtArgs>>): Prisma__TurmaClient<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProfessorTurma model
   */
  interface ProfessorTurmaFieldRefs {
    readonly professor_id: FieldRef<"ProfessorTurma", 'Int'>
    readonly turma_id: FieldRef<"ProfessorTurma", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ProfessorTurma findUnique
   */
  export type ProfessorTurmaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessorTurma
     */
    select?: ProfessorTurmaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessorTurma
     */
    omit?: ProfessorTurmaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorTurmaInclude<ExtArgs> | null
    /**
     * Filter, which ProfessorTurma to fetch.
     */
    where: ProfessorTurmaWhereUniqueInput
  }

  /**
   * ProfessorTurma findUniqueOrThrow
   */
  export type ProfessorTurmaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessorTurma
     */
    select?: ProfessorTurmaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessorTurma
     */
    omit?: ProfessorTurmaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorTurmaInclude<ExtArgs> | null
    /**
     * Filter, which ProfessorTurma to fetch.
     */
    where: ProfessorTurmaWhereUniqueInput
  }

  /**
   * ProfessorTurma findFirst
   */
  export type ProfessorTurmaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessorTurma
     */
    select?: ProfessorTurmaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessorTurma
     */
    omit?: ProfessorTurmaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorTurmaInclude<ExtArgs> | null
    /**
     * Filter, which ProfessorTurma to fetch.
     */
    where?: ProfessorTurmaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessorTurmas to fetch.
     */
    orderBy?: ProfessorTurmaOrderByWithRelationInput | ProfessorTurmaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfessorTurmas.
     */
    cursor?: ProfessorTurmaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessorTurmas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessorTurmas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfessorTurmas.
     */
    distinct?: ProfessorTurmaScalarFieldEnum | ProfessorTurmaScalarFieldEnum[]
  }

  /**
   * ProfessorTurma findFirstOrThrow
   */
  export type ProfessorTurmaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessorTurma
     */
    select?: ProfessorTurmaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessorTurma
     */
    omit?: ProfessorTurmaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorTurmaInclude<ExtArgs> | null
    /**
     * Filter, which ProfessorTurma to fetch.
     */
    where?: ProfessorTurmaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessorTurmas to fetch.
     */
    orderBy?: ProfessorTurmaOrderByWithRelationInput | ProfessorTurmaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfessorTurmas.
     */
    cursor?: ProfessorTurmaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessorTurmas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessorTurmas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfessorTurmas.
     */
    distinct?: ProfessorTurmaScalarFieldEnum | ProfessorTurmaScalarFieldEnum[]
  }

  /**
   * ProfessorTurma findMany
   */
  export type ProfessorTurmaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessorTurma
     */
    select?: ProfessorTurmaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessorTurma
     */
    omit?: ProfessorTurmaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorTurmaInclude<ExtArgs> | null
    /**
     * Filter, which ProfessorTurmas to fetch.
     */
    where?: ProfessorTurmaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessorTurmas to fetch.
     */
    orderBy?: ProfessorTurmaOrderByWithRelationInput | ProfessorTurmaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProfessorTurmas.
     */
    cursor?: ProfessorTurmaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessorTurmas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessorTurmas.
     */
    skip?: number
    distinct?: ProfessorTurmaScalarFieldEnum | ProfessorTurmaScalarFieldEnum[]
  }

  /**
   * ProfessorTurma create
   */
  export type ProfessorTurmaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessorTurma
     */
    select?: ProfessorTurmaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessorTurma
     */
    omit?: ProfessorTurmaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorTurmaInclude<ExtArgs> | null
    /**
     * The data needed to create a ProfessorTurma.
     */
    data: XOR<ProfessorTurmaCreateInput, ProfessorTurmaUncheckedCreateInput>
  }

  /**
   * ProfessorTurma createMany
   */
  export type ProfessorTurmaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProfessorTurmas.
     */
    data: ProfessorTurmaCreateManyInput | ProfessorTurmaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProfessorTurma createManyAndReturn
   */
  export type ProfessorTurmaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessorTurma
     */
    select?: ProfessorTurmaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessorTurma
     */
    omit?: ProfessorTurmaOmit<ExtArgs> | null
    /**
     * The data used to create many ProfessorTurmas.
     */
    data: ProfessorTurmaCreateManyInput | ProfessorTurmaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorTurmaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProfessorTurma update
   */
  export type ProfessorTurmaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessorTurma
     */
    select?: ProfessorTurmaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessorTurma
     */
    omit?: ProfessorTurmaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorTurmaInclude<ExtArgs> | null
    /**
     * The data needed to update a ProfessorTurma.
     */
    data: XOR<ProfessorTurmaUpdateInput, ProfessorTurmaUncheckedUpdateInput>
    /**
     * Choose, which ProfessorTurma to update.
     */
    where: ProfessorTurmaWhereUniqueInput
  }

  /**
   * ProfessorTurma updateMany
   */
  export type ProfessorTurmaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProfessorTurmas.
     */
    data: XOR<ProfessorTurmaUpdateManyMutationInput, ProfessorTurmaUncheckedUpdateManyInput>
    /**
     * Filter which ProfessorTurmas to update
     */
    where?: ProfessorTurmaWhereInput
    /**
     * Limit how many ProfessorTurmas to update.
     */
    limit?: number
  }

  /**
   * ProfessorTurma updateManyAndReturn
   */
  export type ProfessorTurmaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessorTurma
     */
    select?: ProfessorTurmaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessorTurma
     */
    omit?: ProfessorTurmaOmit<ExtArgs> | null
    /**
     * The data used to update ProfessorTurmas.
     */
    data: XOR<ProfessorTurmaUpdateManyMutationInput, ProfessorTurmaUncheckedUpdateManyInput>
    /**
     * Filter which ProfessorTurmas to update
     */
    where?: ProfessorTurmaWhereInput
    /**
     * Limit how many ProfessorTurmas to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorTurmaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProfessorTurma upsert
   */
  export type ProfessorTurmaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessorTurma
     */
    select?: ProfessorTurmaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessorTurma
     */
    omit?: ProfessorTurmaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorTurmaInclude<ExtArgs> | null
    /**
     * The filter to search for the ProfessorTurma to update in case it exists.
     */
    where: ProfessorTurmaWhereUniqueInput
    /**
     * In case the ProfessorTurma found by the `where` argument doesn't exist, create a new ProfessorTurma with this data.
     */
    create: XOR<ProfessorTurmaCreateInput, ProfessorTurmaUncheckedCreateInput>
    /**
     * In case the ProfessorTurma was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfessorTurmaUpdateInput, ProfessorTurmaUncheckedUpdateInput>
  }

  /**
   * ProfessorTurma delete
   */
  export type ProfessorTurmaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessorTurma
     */
    select?: ProfessorTurmaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessorTurma
     */
    omit?: ProfessorTurmaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorTurmaInclude<ExtArgs> | null
    /**
     * Filter which ProfessorTurma to delete.
     */
    where: ProfessorTurmaWhereUniqueInput
  }

  /**
   * ProfessorTurma deleteMany
   */
  export type ProfessorTurmaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfessorTurmas to delete
     */
    where?: ProfessorTurmaWhereInput
    /**
     * Limit how many ProfessorTurmas to delete.
     */
    limit?: number
  }

  /**
   * ProfessorTurma without action
   */
  export type ProfessorTurmaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessorTurma
     */
    select?: ProfessorTurmaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessorTurma
     */
    omit?: ProfessorTurmaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorTurmaInclude<ExtArgs> | null
  }


  /**
   * Model Post
   */

  export type AggregatePost = {
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  export type PostAvgAggregateOutputType = {
    id: number | null
    professor_id: number | null
    turma_id: number | null
  }

  export type PostSumAggregateOutputType = {
    id: number | null
    professor_id: number | null
    turma_id: number | null
  }

  export type PostMinAggregateOutputType = {
    id: number | null
    titulo: string | null
    conteudo: string | null
    data_criacao: Date | null
    data_atualizacao: Date | null
    professor_id: number | null
    turma_id: number | null
  }

  export type PostMaxAggregateOutputType = {
    id: number | null
    titulo: string | null
    conteudo: string | null
    data_criacao: Date | null
    data_atualizacao: Date | null
    professor_id: number | null
    turma_id: number | null
  }

  export type PostCountAggregateOutputType = {
    id: number
    titulo: number
    conteudo: number
    data_criacao: number
    data_atualizacao: number
    professor_id: number
    turma_id: number
    _all: number
  }


  export type PostAvgAggregateInputType = {
    id?: true
    professor_id?: true
    turma_id?: true
  }

  export type PostSumAggregateInputType = {
    id?: true
    professor_id?: true
    turma_id?: true
  }

  export type PostMinAggregateInputType = {
    id?: true
    titulo?: true
    conteudo?: true
    data_criacao?: true
    data_atualizacao?: true
    professor_id?: true
    turma_id?: true
  }

  export type PostMaxAggregateInputType = {
    id?: true
    titulo?: true
    conteudo?: true
    data_criacao?: true
    data_atualizacao?: true
    professor_id?: true
    turma_id?: true
  }

  export type PostCountAggregateInputType = {
    id?: true
    titulo?: true
    conteudo?: true
    data_criacao?: true
    data_atualizacao?: true
    professor_id?: true
    turma_id?: true
    _all?: true
  }

  export type PostAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Post to aggregate.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Posts
    **/
    _count?: true | PostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostMaxAggregateInputType
  }

  export type GetPostAggregateType<T extends PostAggregateArgs> = {
        [P in keyof T & keyof AggregatePost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost[P]>
      : GetScalarType<T[P], AggregatePost[P]>
  }




  export type PostGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
    orderBy?: PostOrderByWithAggregationInput | PostOrderByWithAggregationInput[]
    by: PostScalarFieldEnum[] | PostScalarFieldEnum
    having?: PostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostCountAggregateInputType | true
    _avg?: PostAvgAggregateInputType
    _sum?: PostSumAggregateInputType
    _min?: PostMinAggregateInputType
    _max?: PostMaxAggregateInputType
  }

  export type PostGroupByOutputType = {
    id: number
    titulo: string
    conteudo: string
    data_criacao: Date
    data_atualizacao: Date | null
    professor_id: number
    turma_id: number
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  type GetPostGroupByPayload<T extends PostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostGroupByOutputType[P]>
            : GetScalarType<T[P], PostGroupByOutputType[P]>
        }
      >
    >


  export type PostSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    conteudo?: boolean
    data_criacao?: boolean
    data_atualizacao?: boolean
    professor_id?: boolean
    turma_id?: boolean
    professor?: boolean | ProfessorDefaultArgs<ExtArgs>
    turma?: boolean | TurmaDefaultArgs<ExtArgs>
    arquivos?: boolean | Post$arquivosArgs<ExtArgs>
    _count?: boolean | PostCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>

  export type PostSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    conteudo?: boolean
    data_criacao?: boolean
    data_atualizacao?: boolean
    professor_id?: boolean
    turma_id?: boolean
    professor?: boolean | ProfessorDefaultArgs<ExtArgs>
    turma?: boolean | TurmaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>

  export type PostSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    conteudo?: boolean
    data_criacao?: boolean
    data_atualizacao?: boolean
    professor_id?: boolean
    turma_id?: boolean
    professor?: boolean | ProfessorDefaultArgs<ExtArgs>
    turma?: boolean | TurmaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>

  export type PostSelectScalar = {
    id?: boolean
    titulo?: boolean
    conteudo?: boolean
    data_criacao?: boolean
    data_atualizacao?: boolean
    professor_id?: boolean
    turma_id?: boolean
  }

  export type PostOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "titulo" | "conteudo" | "data_criacao" | "data_atualizacao" | "professor_id" | "turma_id", ExtArgs["result"]["post"]>
  export type PostInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    professor?: boolean | ProfessorDefaultArgs<ExtArgs>
    turma?: boolean | TurmaDefaultArgs<ExtArgs>
    arquivos?: boolean | Post$arquivosArgs<ExtArgs>
    _count?: boolean | PostCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PostIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    professor?: boolean | ProfessorDefaultArgs<ExtArgs>
    turma?: boolean | TurmaDefaultArgs<ExtArgs>
  }
  export type PostIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    professor?: boolean | ProfessorDefaultArgs<ExtArgs>
    turma?: boolean | TurmaDefaultArgs<ExtArgs>
  }

  export type $PostPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Post"
    objects: {
      professor: Prisma.$ProfessorPayload<ExtArgs>
      turma: Prisma.$TurmaPayload<ExtArgs>
      arquivos: Prisma.$PostArquivoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      titulo: string
      conteudo: string
      data_criacao: Date
      data_atualizacao: Date | null
      professor_id: number
      turma_id: number
    }, ExtArgs["result"]["post"]>
    composites: {}
  }

  type PostGetPayload<S extends boolean | null | undefined | PostDefaultArgs> = $Result.GetResult<Prisma.$PostPayload, S>

  type PostCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PostFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PostCountAggregateInputType | true
    }

  export interface PostDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Post'], meta: { name: 'Post' } }
    /**
     * Find zero or one Post that matches the filter.
     * @param {PostFindUniqueArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PostFindUniqueArgs>(args: SelectSubset<T, PostFindUniqueArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Post that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PostFindUniqueOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PostFindUniqueOrThrowArgs>(args: SelectSubset<T, PostFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Post that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PostFindFirstArgs>(args?: SelectSubset<T, PostFindFirstArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Post that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PostFindFirstOrThrowArgs>(args?: SelectSubset<T, PostFindFirstOrThrowArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Posts
     * const posts = await prisma.post.findMany()
     * 
     * // Get first 10 Posts
     * const posts = await prisma.post.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postWithIdOnly = await prisma.post.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PostFindManyArgs>(args?: SelectSubset<T, PostFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Post.
     * @param {PostCreateArgs} args - Arguments to create a Post.
     * @example
     * // Create one Post
     * const Post = await prisma.post.create({
     *   data: {
     *     // ... data to create a Post
     *   }
     * })
     * 
     */
    create<T extends PostCreateArgs>(args: SelectSubset<T, PostCreateArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Posts.
     * @param {PostCreateManyArgs} args - Arguments to create many Posts.
     * @example
     * // Create many Posts
     * const post = await prisma.post.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PostCreateManyArgs>(args?: SelectSubset<T, PostCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Posts and returns the data saved in the database.
     * @param {PostCreateManyAndReturnArgs} args - Arguments to create many Posts.
     * @example
     * // Create many Posts
     * const post = await prisma.post.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Posts and only return the `id`
     * const postWithIdOnly = await prisma.post.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PostCreateManyAndReturnArgs>(args?: SelectSubset<T, PostCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Post.
     * @param {PostDeleteArgs} args - Arguments to delete one Post.
     * @example
     * // Delete one Post
     * const Post = await prisma.post.delete({
     *   where: {
     *     // ... filter to delete one Post
     *   }
     * })
     * 
     */
    delete<T extends PostDeleteArgs>(args: SelectSubset<T, PostDeleteArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Post.
     * @param {PostUpdateArgs} args - Arguments to update one Post.
     * @example
     * // Update one Post
     * const post = await prisma.post.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PostUpdateArgs>(args: SelectSubset<T, PostUpdateArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Posts.
     * @param {PostDeleteManyArgs} args - Arguments to filter Posts to delete.
     * @example
     * // Delete a few Posts
     * const { count } = await prisma.post.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PostDeleteManyArgs>(args?: SelectSubset<T, PostDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PostUpdateManyArgs>(args: SelectSubset<T, PostUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts and returns the data updated in the database.
     * @param {PostUpdateManyAndReturnArgs} args - Arguments to update many Posts.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Posts and only return the `id`
     * const postWithIdOnly = await prisma.post.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PostUpdateManyAndReturnArgs>(args: SelectSubset<T, PostUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Post.
     * @param {PostUpsertArgs} args - Arguments to update or create a Post.
     * @example
     * // Update or create a Post
     * const post = await prisma.post.upsert({
     *   create: {
     *     // ... data to create a Post
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post we want to update
     *   }
     * })
     */
    upsert<T extends PostUpsertArgs>(args: SelectSubset<T, PostUpsertArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostCountArgs} args - Arguments to filter Posts to count.
     * @example
     * // Count the number of Posts
     * const count = await prisma.post.count({
     *   where: {
     *     // ... the filter for the Posts we want to count
     *   }
     * })
    **/
    count<T extends PostCountArgs>(
      args?: Subset<T, PostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostAggregateArgs>(args: Subset<T, PostAggregateArgs>): Prisma.PrismaPromise<GetPostAggregateType<T>>

    /**
     * Group by Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostGroupByArgs['orderBy'] }
        : { orderBy?: PostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Post model
   */
  readonly fields: PostFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Post.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PostClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    professor<T extends ProfessorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfessorDefaultArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    turma<T extends TurmaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TurmaDefaultArgs<ExtArgs>>): Prisma__TurmaClient<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    arquivos<T extends Post$arquivosArgs<ExtArgs> = {}>(args?: Subset<T, Post$arquivosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostArquivoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Post model
   */
  interface PostFieldRefs {
    readonly id: FieldRef<"Post", 'Int'>
    readonly titulo: FieldRef<"Post", 'String'>
    readonly conteudo: FieldRef<"Post", 'String'>
    readonly data_criacao: FieldRef<"Post", 'DateTime'>
    readonly data_atualizacao: FieldRef<"Post", 'DateTime'>
    readonly professor_id: FieldRef<"Post", 'Int'>
    readonly turma_id: FieldRef<"Post", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Post findUnique
   */
  export type PostFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post findUniqueOrThrow
   */
  export type PostFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post findFirst
   */
  export type PostFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post findFirstOrThrow
   */
  export type PostFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post findMany
   */
  export type PostFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Posts to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post create
   */
  export type PostCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The data needed to create a Post.
     */
    data: XOR<PostCreateInput, PostUncheckedCreateInput>
  }

  /**
   * Post createMany
   */
  export type PostCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Posts.
     */
    data: PostCreateManyInput | PostCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Post createManyAndReturn
   */
  export type PostCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * The data used to create many Posts.
     */
    data: PostCreateManyInput | PostCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Post update
   */
  export type PostUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The data needed to update a Post.
     */
    data: XOR<PostUpdateInput, PostUncheckedUpdateInput>
    /**
     * Choose, which Post to update.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post updateMany
   */
  export type PostUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Posts.
     */
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>
    /**
     * Filter which Posts to update
     */
    where?: PostWhereInput
    /**
     * Limit how many Posts to update.
     */
    limit?: number
  }

  /**
   * Post updateManyAndReturn
   */
  export type PostUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * The data used to update Posts.
     */
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>
    /**
     * Filter which Posts to update
     */
    where?: PostWhereInput
    /**
     * Limit how many Posts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Post upsert
   */
  export type PostUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The filter to search for the Post to update in case it exists.
     */
    where: PostWhereUniqueInput
    /**
     * In case the Post found by the `where` argument doesn't exist, create a new Post with this data.
     */
    create: XOR<PostCreateInput, PostUncheckedCreateInput>
    /**
     * In case the Post was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostUpdateInput, PostUncheckedUpdateInput>
  }

  /**
   * Post delete
   */
  export type PostDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter which Post to delete.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post deleteMany
   */
  export type PostDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Posts to delete
     */
    where?: PostWhereInput
    /**
     * Limit how many Posts to delete.
     */
    limit?: number
  }

  /**
   * Post.arquivos
   */
  export type Post$arquivosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostArquivo
     */
    select?: PostArquivoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostArquivo
     */
    omit?: PostArquivoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostArquivoInclude<ExtArgs> | null
    where?: PostArquivoWhereInput
    orderBy?: PostArquivoOrderByWithRelationInput | PostArquivoOrderByWithRelationInput[]
    cursor?: PostArquivoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostArquivoScalarFieldEnum | PostArquivoScalarFieldEnum[]
  }

  /**
   * Post without action
   */
  export type PostDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
  }


  /**
   * Model PostArquivo
   */

  export type AggregatePostArquivo = {
    _count: PostArquivoCountAggregateOutputType | null
    _avg: PostArquivoAvgAggregateOutputType | null
    _sum: PostArquivoSumAggregateOutputType | null
    _min: PostArquivoMinAggregateOutputType | null
    _max: PostArquivoMaxAggregateOutputType | null
  }

  export type PostArquivoAvgAggregateOutputType = {
    id: number | null
    tamanho: number | null
    post_id: number | null
  }

  export type PostArquivoSumAggregateOutputType = {
    id: number | null
    tamanho: number | null
    post_id: number | null
  }

  export type PostArquivoMinAggregateOutputType = {
    id: number | null
    nome: string | null
    url: string | null
    tipo: string | null
    tamanho: number | null
    post_id: number | null
  }

  export type PostArquivoMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    url: string | null
    tipo: string | null
    tamanho: number | null
    post_id: number | null
  }

  export type PostArquivoCountAggregateOutputType = {
    id: number
    nome: number
    url: number
    tipo: number
    tamanho: number
    post_id: number
    _all: number
  }


  export type PostArquivoAvgAggregateInputType = {
    id?: true
    tamanho?: true
    post_id?: true
  }

  export type PostArquivoSumAggregateInputType = {
    id?: true
    tamanho?: true
    post_id?: true
  }

  export type PostArquivoMinAggregateInputType = {
    id?: true
    nome?: true
    url?: true
    tipo?: true
    tamanho?: true
    post_id?: true
  }

  export type PostArquivoMaxAggregateInputType = {
    id?: true
    nome?: true
    url?: true
    tipo?: true
    tamanho?: true
    post_id?: true
  }

  export type PostArquivoCountAggregateInputType = {
    id?: true
    nome?: true
    url?: true
    tipo?: true
    tamanho?: true
    post_id?: true
    _all?: true
  }

  export type PostArquivoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PostArquivo to aggregate.
     */
    where?: PostArquivoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostArquivos to fetch.
     */
    orderBy?: PostArquivoOrderByWithRelationInput | PostArquivoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostArquivoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostArquivos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostArquivos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PostArquivos
    **/
    _count?: true | PostArquivoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostArquivoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostArquivoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostArquivoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostArquivoMaxAggregateInputType
  }

  export type GetPostArquivoAggregateType<T extends PostArquivoAggregateArgs> = {
        [P in keyof T & keyof AggregatePostArquivo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePostArquivo[P]>
      : GetScalarType<T[P], AggregatePostArquivo[P]>
  }




  export type PostArquivoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostArquivoWhereInput
    orderBy?: PostArquivoOrderByWithAggregationInput | PostArquivoOrderByWithAggregationInput[]
    by: PostArquivoScalarFieldEnum[] | PostArquivoScalarFieldEnum
    having?: PostArquivoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostArquivoCountAggregateInputType | true
    _avg?: PostArquivoAvgAggregateInputType
    _sum?: PostArquivoSumAggregateInputType
    _min?: PostArquivoMinAggregateInputType
    _max?: PostArquivoMaxAggregateInputType
  }

  export type PostArquivoGroupByOutputType = {
    id: number
    nome: string
    url: string
    tipo: string
    tamanho: number | null
    post_id: number
    _count: PostArquivoCountAggregateOutputType | null
    _avg: PostArquivoAvgAggregateOutputType | null
    _sum: PostArquivoSumAggregateOutputType | null
    _min: PostArquivoMinAggregateOutputType | null
    _max: PostArquivoMaxAggregateOutputType | null
  }

  type GetPostArquivoGroupByPayload<T extends PostArquivoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostArquivoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostArquivoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostArquivoGroupByOutputType[P]>
            : GetScalarType<T[P], PostArquivoGroupByOutputType[P]>
        }
      >
    >


  export type PostArquivoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    url?: boolean
    tipo?: boolean
    tamanho?: boolean
    post_id?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postArquivo"]>

  export type PostArquivoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    url?: boolean
    tipo?: boolean
    tamanho?: boolean
    post_id?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postArquivo"]>

  export type PostArquivoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    url?: boolean
    tipo?: boolean
    tamanho?: boolean
    post_id?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postArquivo"]>

  export type PostArquivoSelectScalar = {
    id?: boolean
    nome?: boolean
    url?: boolean
    tipo?: boolean
    tamanho?: boolean
    post_id?: boolean
  }

  export type PostArquivoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "url" | "tipo" | "tamanho" | "post_id", ExtArgs["result"]["postArquivo"]>
  export type PostArquivoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
  }
  export type PostArquivoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
  }
  export type PostArquivoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
  }

  export type $PostArquivoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PostArquivo"
    objects: {
      post: Prisma.$PostPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      url: string
      tipo: string
      tamanho: number | null
      post_id: number
    }, ExtArgs["result"]["postArquivo"]>
    composites: {}
  }

  type PostArquivoGetPayload<S extends boolean | null | undefined | PostArquivoDefaultArgs> = $Result.GetResult<Prisma.$PostArquivoPayload, S>

  type PostArquivoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PostArquivoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PostArquivoCountAggregateInputType | true
    }

  export interface PostArquivoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PostArquivo'], meta: { name: 'PostArquivo' } }
    /**
     * Find zero or one PostArquivo that matches the filter.
     * @param {PostArquivoFindUniqueArgs} args - Arguments to find a PostArquivo
     * @example
     * // Get one PostArquivo
     * const postArquivo = await prisma.postArquivo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PostArquivoFindUniqueArgs>(args: SelectSubset<T, PostArquivoFindUniqueArgs<ExtArgs>>): Prisma__PostArquivoClient<$Result.GetResult<Prisma.$PostArquivoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PostArquivo that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PostArquivoFindUniqueOrThrowArgs} args - Arguments to find a PostArquivo
     * @example
     * // Get one PostArquivo
     * const postArquivo = await prisma.postArquivo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PostArquivoFindUniqueOrThrowArgs>(args: SelectSubset<T, PostArquivoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PostArquivoClient<$Result.GetResult<Prisma.$PostArquivoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PostArquivo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostArquivoFindFirstArgs} args - Arguments to find a PostArquivo
     * @example
     * // Get one PostArquivo
     * const postArquivo = await prisma.postArquivo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PostArquivoFindFirstArgs>(args?: SelectSubset<T, PostArquivoFindFirstArgs<ExtArgs>>): Prisma__PostArquivoClient<$Result.GetResult<Prisma.$PostArquivoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PostArquivo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostArquivoFindFirstOrThrowArgs} args - Arguments to find a PostArquivo
     * @example
     * // Get one PostArquivo
     * const postArquivo = await prisma.postArquivo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PostArquivoFindFirstOrThrowArgs>(args?: SelectSubset<T, PostArquivoFindFirstOrThrowArgs<ExtArgs>>): Prisma__PostArquivoClient<$Result.GetResult<Prisma.$PostArquivoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PostArquivos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostArquivoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PostArquivos
     * const postArquivos = await prisma.postArquivo.findMany()
     * 
     * // Get first 10 PostArquivos
     * const postArquivos = await prisma.postArquivo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postArquivoWithIdOnly = await prisma.postArquivo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PostArquivoFindManyArgs>(args?: SelectSubset<T, PostArquivoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostArquivoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PostArquivo.
     * @param {PostArquivoCreateArgs} args - Arguments to create a PostArquivo.
     * @example
     * // Create one PostArquivo
     * const PostArquivo = await prisma.postArquivo.create({
     *   data: {
     *     // ... data to create a PostArquivo
     *   }
     * })
     * 
     */
    create<T extends PostArquivoCreateArgs>(args: SelectSubset<T, PostArquivoCreateArgs<ExtArgs>>): Prisma__PostArquivoClient<$Result.GetResult<Prisma.$PostArquivoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PostArquivos.
     * @param {PostArquivoCreateManyArgs} args - Arguments to create many PostArquivos.
     * @example
     * // Create many PostArquivos
     * const postArquivo = await prisma.postArquivo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PostArquivoCreateManyArgs>(args?: SelectSubset<T, PostArquivoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PostArquivos and returns the data saved in the database.
     * @param {PostArquivoCreateManyAndReturnArgs} args - Arguments to create many PostArquivos.
     * @example
     * // Create many PostArquivos
     * const postArquivo = await prisma.postArquivo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PostArquivos and only return the `id`
     * const postArquivoWithIdOnly = await prisma.postArquivo.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PostArquivoCreateManyAndReturnArgs>(args?: SelectSubset<T, PostArquivoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostArquivoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PostArquivo.
     * @param {PostArquivoDeleteArgs} args - Arguments to delete one PostArquivo.
     * @example
     * // Delete one PostArquivo
     * const PostArquivo = await prisma.postArquivo.delete({
     *   where: {
     *     // ... filter to delete one PostArquivo
     *   }
     * })
     * 
     */
    delete<T extends PostArquivoDeleteArgs>(args: SelectSubset<T, PostArquivoDeleteArgs<ExtArgs>>): Prisma__PostArquivoClient<$Result.GetResult<Prisma.$PostArquivoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PostArquivo.
     * @param {PostArquivoUpdateArgs} args - Arguments to update one PostArquivo.
     * @example
     * // Update one PostArquivo
     * const postArquivo = await prisma.postArquivo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PostArquivoUpdateArgs>(args: SelectSubset<T, PostArquivoUpdateArgs<ExtArgs>>): Prisma__PostArquivoClient<$Result.GetResult<Prisma.$PostArquivoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PostArquivos.
     * @param {PostArquivoDeleteManyArgs} args - Arguments to filter PostArquivos to delete.
     * @example
     * // Delete a few PostArquivos
     * const { count } = await prisma.postArquivo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PostArquivoDeleteManyArgs>(args?: SelectSubset<T, PostArquivoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PostArquivos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostArquivoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PostArquivos
     * const postArquivo = await prisma.postArquivo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PostArquivoUpdateManyArgs>(args: SelectSubset<T, PostArquivoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PostArquivos and returns the data updated in the database.
     * @param {PostArquivoUpdateManyAndReturnArgs} args - Arguments to update many PostArquivos.
     * @example
     * // Update many PostArquivos
     * const postArquivo = await prisma.postArquivo.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PostArquivos and only return the `id`
     * const postArquivoWithIdOnly = await prisma.postArquivo.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PostArquivoUpdateManyAndReturnArgs>(args: SelectSubset<T, PostArquivoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostArquivoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PostArquivo.
     * @param {PostArquivoUpsertArgs} args - Arguments to update or create a PostArquivo.
     * @example
     * // Update or create a PostArquivo
     * const postArquivo = await prisma.postArquivo.upsert({
     *   create: {
     *     // ... data to create a PostArquivo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PostArquivo we want to update
     *   }
     * })
     */
    upsert<T extends PostArquivoUpsertArgs>(args: SelectSubset<T, PostArquivoUpsertArgs<ExtArgs>>): Prisma__PostArquivoClient<$Result.GetResult<Prisma.$PostArquivoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PostArquivos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostArquivoCountArgs} args - Arguments to filter PostArquivos to count.
     * @example
     * // Count the number of PostArquivos
     * const count = await prisma.postArquivo.count({
     *   where: {
     *     // ... the filter for the PostArquivos we want to count
     *   }
     * })
    **/
    count<T extends PostArquivoCountArgs>(
      args?: Subset<T, PostArquivoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostArquivoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PostArquivo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostArquivoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostArquivoAggregateArgs>(args: Subset<T, PostArquivoAggregateArgs>): Prisma.PrismaPromise<GetPostArquivoAggregateType<T>>

    /**
     * Group by PostArquivo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostArquivoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostArquivoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostArquivoGroupByArgs['orderBy'] }
        : { orderBy?: PostArquivoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostArquivoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostArquivoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PostArquivo model
   */
  readonly fields: PostArquivoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PostArquivo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PostArquivoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    post<T extends PostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostDefaultArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PostArquivo model
   */
  interface PostArquivoFieldRefs {
    readonly id: FieldRef<"PostArquivo", 'Int'>
    readonly nome: FieldRef<"PostArquivo", 'String'>
    readonly url: FieldRef<"PostArquivo", 'String'>
    readonly tipo: FieldRef<"PostArquivo", 'String'>
    readonly tamanho: FieldRef<"PostArquivo", 'Int'>
    readonly post_id: FieldRef<"PostArquivo", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PostArquivo findUnique
   */
  export type PostArquivoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostArquivo
     */
    select?: PostArquivoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostArquivo
     */
    omit?: PostArquivoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostArquivoInclude<ExtArgs> | null
    /**
     * Filter, which PostArquivo to fetch.
     */
    where: PostArquivoWhereUniqueInput
  }

  /**
   * PostArquivo findUniqueOrThrow
   */
  export type PostArquivoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostArquivo
     */
    select?: PostArquivoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostArquivo
     */
    omit?: PostArquivoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostArquivoInclude<ExtArgs> | null
    /**
     * Filter, which PostArquivo to fetch.
     */
    where: PostArquivoWhereUniqueInput
  }

  /**
   * PostArquivo findFirst
   */
  export type PostArquivoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostArquivo
     */
    select?: PostArquivoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostArquivo
     */
    omit?: PostArquivoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostArquivoInclude<ExtArgs> | null
    /**
     * Filter, which PostArquivo to fetch.
     */
    where?: PostArquivoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostArquivos to fetch.
     */
    orderBy?: PostArquivoOrderByWithRelationInput | PostArquivoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostArquivos.
     */
    cursor?: PostArquivoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostArquivos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostArquivos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostArquivos.
     */
    distinct?: PostArquivoScalarFieldEnum | PostArquivoScalarFieldEnum[]
  }

  /**
   * PostArquivo findFirstOrThrow
   */
  export type PostArquivoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostArquivo
     */
    select?: PostArquivoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostArquivo
     */
    omit?: PostArquivoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostArquivoInclude<ExtArgs> | null
    /**
     * Filter, which PostArquivo to fetch.
     */
    where?: PostArquivoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostArquivos to fetch.
     */
    orderBy?: PostArquivoOrderByWithRelationInput | PostArquivoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostArquivos.
     */
    cursor?: PostArquivoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostArquivos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostArquivos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostArquivos.
     */
    distinct?: PostArquivoScalarFieldEnum | PostArquivoScalarFieldEnum[]
  }

  /**
   * PostArquivo findMany
   */
  export type PostArquivoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostArquivo
     */
    select?: PostArquivoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostArquivo
     */
    omit?: PostArquivoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostArquivoInclude<ExtArgs> | null
    /**
     * Filter, which PostArquivos to fetch.
     */
    where?: PostArquivoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostArquivos to fetch.
     */
    orderBy?: PostArquivoOrderByWithRelationInput | PostArquivoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PostArquivos.
     */
    cursor?: PostArquivoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostArquivos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostArquivos.
     */
    skip?: number
    distinct?: PostArquivoScalarFieldEnum | PostArquivoScalarFieldEnum[]
  }

  /**
   * PostArquivo create
   */
  export type PostArquivoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostArquivo
     */
    select?: PostArquivoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostArquivo
     */
    omit?: PostArquivoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostArquivoInclude<ExtArgs> | null
    /**
     * The data needed to create a PostArquivo.
     */
    data: XOR<PostArquivoCreateInput, PostArquivoUncheckedCreateInput>
  }

  /**
   * PostArquivo createMany
   */
  export type PostArquivoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PostArquivos.
     */
    data: PostArquivoCreateManyInput | PostArquivoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PostArquivo createManyAndReturn
   */
  export type PostArquivoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostArquivo
     */
    select?: PostArquivoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PostArquivo
     */
    omit?: PostArquivoOmit<ExtArgs> | null
    /**
     * The data used to create many PostArquivos.
     */
    data: PostArquivoCreateManyInput | PostArquivoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostArquivoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PostArquivo update
   */
  export type PostArquivoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostArquivo
     */
    select?: PostArquivoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostArquivo
     */
    omit?: PostArquivoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostArquivoInclude<ExtArgs> | null
    /**
     * The data needed to update a PostArquivo.
     */
    data: XOR<PostArquivoUpdateInput, PostArquivoUncheckedUpdateInput>
    /**
     * Choose, which PostArquivo to update.
     */
    where: PostArquivoWhereUniqueInput
  }

  /**
   * PostArquivo updateMany
   */
  export type PostArquivoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PostArquivos.
     */
    data: XOR<PostArquivoUpdateManyMutationInput, PostArquivoUncheckedUpdateManyInput>
    /**
     * Filter which PostArquivos to update
     */
    where?: PostArquivoWhereInput
    /**
     * Limit how many PostArquivos to update.
     */
    limit?: number
  }

  /**
   * PostArquivo updateManyAndReturn
   */
  export type PostArquivoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostArquivo
     */
    select?: PostArquivoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PostArquivo
     */
    omit?: PostArquivoOmit<ExtArgs> | null
    /**
     * The data used to update PostArquivos.
     */
    data: XOR<PostArquivoUpdateManyMutationInput, PostArquivoUncheckedUpdateManyInput>
    /**
     * Filter which PostArquivos to update
     */
    where?: PostArquivoWhereInput
    /**
     * Limit how many PostArquivos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostArquivoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PostArquivo upsert
   */
  export type PostArquivoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostArquivo
     */
    select?: PostArquivoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostArquivo
     */
    omit?: PostArquivoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostArquivoInclude<ExtArgs> | null
    /**
     * The filter to search for the PostArquivo to update in case it exists.
     */
    where: PostArquivoWhereUniqueInput
    /**
     * In case the PostArquivo found by the `where` argument doesn't exist, create a new PostArquivo with this data.
     */
    create: XOR<PostArquivoCreateInput, PostArquivoUncheckedCreateInput>
    /**
     * In case the PostArquivo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostArquivoUpdateInput, PostArquivoUncheckedUpdateInput>
  }

  /**
   * PostArquivo delete
   */
  export type PostArquivoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostArquivo
     */
    select?: PostArquivoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostArquivo
     */
    omit?: PostArquivoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostArquivoInclude<ExtArgs> | null
    /**
     * Filter which PostArquivo to delete.
     */
    where: PostArquivoWhereUniqueInput
  }

  /**
   * PostArquivo deleteMany
   */
  export type PostArquivoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PostArquivos to delete
     */
    where?: PostArquivoWhereInput
    /**
     * Limit how many PostArquivos to delete.
     */
    limit?: number
  }

  /**
   * PostArquivo without action
   */
  export type PostArquivoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostArquivo
     */
    select?: PostArquivoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostArquivo
     */
    omit?: PostArquivoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostArquivoInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ProfessorScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    senha: 'senha',
    avatar: 'avatar'
  };

  export type ProfessorScalarFieldEnum = (typeof ProfessorScalarFieldEnum)[keyof typeof ProfessorScalarFieldEnum]


  export const TurmaScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    icon: 'icon'
  };

  export type TurmaScalarFieldEnum = (typeof TurmaScalarFieldEnum)[keyof typeof TurmaScalarFieldEnum]


  export const ProfessorTurmaScalarFieldEnum: {
    professor_id: 'professor_id',
    turma_id: 'turma_id'
  };

  export type ProfessorTurmaScalarFieldEnum = (typeof ProfessorTurmaScalarFieldEnum)[keyof typeof ProfessorTurmaScalarFieldEnum]


  export const PostScalarFieldEnum: {
    id: 'id',
    titulo: 'titulo',
    conteudo: 'conteudo',
    data_criacao: 'data_criacao',
    data_atualizacao: 'data_atualizacao',
    professor_id: 'professor_id',
    turma_id: 'turma_id'
  };

  export type PostScalarFieldEnum = (typeof PostScalarFieldEnum)[keyof typeof PostScalarFieldEnum]


  export const PostArquivoScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    url: 'url',
    tipo: 'tipo',
    tamanho: 'tamanho',
    post_id: 'post_id'
  };

  export type PostArquivoScalarFieldEnum = (typeof PostArquivoScalarFieldEnum)[keyof typeof PostArquivoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type ProfessorWhereInput = {
    AND?: ProfessorWhereInput | ProfessorWhereInput[]
    OR?: ProfessorWhereInput[]
    NOT?: ProfessorWhereInput | ProfessorWhereInput[]
    id?: IntFilter<"Professor"> | number
    nome?: StringFilter<"Professor"> | string
    email?: StringFilter<"Professor"> | string
    senha?: StringFilter<"Professor"> | string
    avatar?: StringNullableFilter<"Professor"> | string | null
    posts?: PostListRelationFilter
    turmas?: ProfessorTurmaListRelationFilter
  }

  export type ProfessorOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    avatar?: SortOrderInput | SortOrder
    posts?: PostOrderByRelationAggregateInput
    turmas?: ProfessorTurmaOrderByRelationAggregateInput
  }

  export type ProfessorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: ProfessorWhereInput | ProfessorWhereInput[]
    OR?: ProfessorWhereInput[]
    NOT?: ProfessorWhereInput | ProfessorWhereInput[]
    nome?: StringFilter<"Professor"> | string
    senha?: StringFilter<"Professor"> | string
    avatar?: StringNullableFilter<"Professor"> | string | null
    posts?: PostListRelationFilter
    turmas?: ProfessorTurmaListRelationFilter
  }, "id" | "email">

  export type ProfessorOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    avatar?: SortOrderInput | SortOrder
    _count?: ProfessorCountOrderByAggregateInput
    _avg?: ProfessorAvgOrderByAggregateInput
    _max?: ProfessorMaxOrderByAggregateInput
    _min?: ProfessorMinOrderByAggregateInput
    _sum?: ProfessorSumOrderByAggregateInput
  }

  export type ProfessorScalarWhereWithAggregatesInput = {
    AND?: ProfessorScalarWhereWithAggregatesInput | ProfessorScalarWhereWithAggregatesInput[]
    OR?: ProfessorScalarWhereWithAggregatesInput[]
    NOT?: ProfessorScalarWhereWithAggregatesInput | ProfessorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Professor"> | number
    nome?: StringWithAggregatesFilter<"Professor"> | string
    email?: StringWithAggregatesFilter<"Professor"> | string
    senha?: StringWithAggregatesFilter<"Professor"> | string
    avatar?: StringNullableWithAggregatesFilter<"Professor"> | string | null
  }

  export type TurmaWhereInput = {
    AND?: TurmaWhereInput | TurmaWhereInput[]
    OR?: TurmaWhereInput[]
    NOT?: TurmaWhereInput | TurmaWhereInput[]
    id?: IntFilter<"Turma"> | number
    nome?: StringFilter<"Turma"> | string
    icon?: StringNullableFilter<"Turma"> | string | null
    posts?: PostListRelationFilter
    professores?: ProfessorTurmaListRelationFilter
  }

  export type TurmaOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    icon?: SortOrderInput | SortOrder
    posts?: PostOrderByRelationAggregateInput
    professores?: ProfessorTurmaOrderByRelationAggregateInput
  }

  export type TurmaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nome?: string
    AND?: TurmaWhereInput | TurmaWhereInput[]
    OR?: TurmaWhereInput[]
    NOT?: TurmaWhereInput | TurmaWhereInput[]
    icon?: StringNullableFilter<"Turma"> | string | null
    posts?: PostListRelationFilter
    professores?: ProfessorTurmaListRelationFilter
  }, "id" | "nome">

  export type TurmaOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    icon?: SortOrderInput | SortOrder
    _count?: TurmaCountOrderByAggregateInput
    _avg?: TurmaAvgOrderByAggregateInput
    _max?: TurmaMaxOrderByAggregateInput
    _min?: TurmaMinOrderByAggregateInput
    _sum?: TurmaSumOrderByAggregateInput
  }

  export type TurmaScalarWhereWithAggregatesInput = {
    AND?: TurmaScalarWhereWithAggregatesInput | TurmaScalarWhereWithAggregatesInput[]
    OR?: TurmaScalarWhereWithAggregatesInput[]
    NOT?: TurmaScalarWhereWithAggregatesInput | TurmaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Turma"> | number
    nome?: StringWithAggregatesFilter<"Turma"> | string
    icon?: StringNullableWithAggregatesFilter<"Turma"> | string | null
  }

  export type ProfessorTurmaWhereInput = {
    AND?: ProfessorTurmaWhereInput | ProfessorTurmaWhereInput[]
    OR?: ProfessorTurmaWhereInput[]
    NOT?: ProfessorTurmaWhereInput | ProfessorTurmaWhereInput[]
    professor_id?: IntFilter<"ProfessorTurma"> | number
    turma_id?: IntFilter<"ProfessorTurma"> | number
    professor?: XOR<ProfessorScalarRelationFilter, ProfessorWhereInput>
    turma?: XOR<TurmaScalarRelationFilter, TurmaWhereInput>
  }

  export type ProfessorTurmaOrderByWithRelationInput = {
    professor_id?: SortOrder
    turma_id?: SortOrder
    professor?: ProfessorOrderByWithRelationInput
    turma?: TurmaOrderByWithRelationInput
  }

  export type ProfessorTurmaWhereUniqueInput = Prisma.AtLeast<{
    professor_id_turma_id?: ProfessorTurmaProfessor_idTurma_idCompoundUniqueInput
    AND?: ProfessorTurmaWhereInput | ProfessorTurmaWhereInput[]
    OR?: ProfessorTurmaWhereInput[]
    NOT?: ProfessorTurmaWhereInput | ProfessorTurmaWhereInput[]
    professor_id?: IntFilter<"ProfessorTurma"> | number
    turma_id?: IntFilter<"ProfessorTurma"> | number
    professor?: XOR<ProfessorScalarRelationFilter, ProfessorWhereInput>
    turma?: XOR<TurmaScalarRelationFilter, TurmaWhereInput>
  }, "professor_id_turma_id">

  export type ProfessorTurmaOrderByWithAggregationInput = {
    professor_id?: SortOrder
    turma_id?: SortOrder
    _count?: ProfessorTurmaCountOrderByAggregateInput
    _avg?: ProfessorTurmaAvgOrderByAggregateInput
    _max?: ProfessorTurmaMaxOrderByAggregateInput
    _min?: ProfessorTurmaMinOrderByAggregateInput
    _sum?: ProfessorTurmaSumOrderByAggregateInput
  }

  export type ProfessorTurmaScalarWhereWithAggregatesInput = {
    AND?: ProfessorTurmaScalarWhereWithAggregatesInput | ProfessorTurmaScalarWhereWithAggregatesInput[]
    OR?: ProfessorTurmaScalarWhereWithAggregatesInput[]
    NOT?: ProfessorTurmaScalarWhereWithAggregatesInput | ProfessorTurmaScalarWhereWithAggregatesInput[]
    professor_id?: IntWithAggregatesFilter<"ProfessorTurma"> | number
    turma_id?: IntWithAggregatesFilter<"ProfessorTurma"> | number
  }

  export type PostWhereInput = {
    AND?: PostWhereInput | PostWhereInput[]
    OR?: PostWhereInput[]
    NOT?: PostWhereInput | PostWhereInput[]
    id?: IntFilter<"Post"> | number
    titulo?: StringFilter<"Post"> | string
    conteudo?: StringFilter<"Post"> | string
    data_criacao?: DateTimeFilter<"Post"> | Date | string
    data_atualizacao?: DateTimeNullableFilter<"Post"> | Date | string | null
    professor_id?: IntFilter<"Post"> | number
    turma_id?: IntFilter<"Post"> | number
    professor?: XOR<ProfessorScalarRelationFilter, ProfessorWhereInput>
    turma?: XOR<TurmaScalarRelationFilter, TurmaWhereInput>
    arquivos?: PostArquivoListRelationFilter
  }

  export type PostOrderByWithRelationInput = {
    id?: SortOrder
    titulo?: SortOrder
    conteudo?: SortOrder
    data_criacao?: SortOrder
    data_atualizacao?: SortOrderInput | SortOrder
    professor_id?: SortOrder
    turma_id?: SortOrder
    professor?: ProfessorOrderByWithRelationInput
    turma?: TurmaOrderByWithRelationInput
    arquivos?: PostArquivoOrderByRelationAggregateInput
  }

  export type PostWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PostWhereInput | PostWhereInput[]
    OR?: PostWhereInput[]
    NOT?: PostWhereInput | PostWhereInput[]
    titulo?: StringFilter<"Post"> | string
    conteudo?: StringFilter<"Post"> | string
    data_criacao?: DateTimeFilter<"Post"> | Date | string
    data_atualizacao?: DateTimeNullableFilter<"Post"> | Date | string | null
    professor_id?: IntFilter<"Post"> | number
    turma_id?: IntFilter<"Post"> | number
    professor?: XOR<ProfessorScalarRelationFilter, ProfessorWhereInput>
    turma?: XOR<TurmaScalarRelationFilter, TurmaWhereInput>
    arquivos?: PostArquivoListRelationFilter
  }, "id">

  export type PostOrderByWithAggregationInput = {
    id?: SortOrder
    titulo?: SortOrder
    conteudo?: SortOrder
    data_criacao?: SortOrder
    data_atualizacao?: SortOrderInput | SortOrder
    professor_id?: SortOrder
    turma_id?: SortOrder
    _count?: PostCountOrderByAggregateInput
    _avg?: PostAvgOrderByAggregateInput
    _max?: PostMaxOrderByAggregateInput
    _min?: PostMinOrderByAggregateInput
    _sum?: PostSumOrderByAggregateInput
  }

  export type PostScalarWhereWithAggregatesInput = {
    AND?: PostScalarWhereWithAggregatesInput | PostScalarWhereWithAggregatesInput[]
    OR?: PostScalarWhereWithAggregatesInput[]
    NOT?: PostScalarWhereWithAggregatesInput | PostScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Post"> | number
    titulo?: StringWithAggregatesFilter<"Post"> | string
    conteudo?: StringWithAggregatesFilter<"Post"> | string
    data_criacao?: DateTimeWithAggregatesFilter<"Post"> | Date | string
    data_atualizacao?: DateTimeNullableWithAggregatesFilter<"Post"> | Date | string | null
    professor_id?: IntWithAggregatesFilter<"Post"> | number
    turma_id?: IntWithAggregatesFilter<"Post"> | number
  }

  export type PostArquivoWhereInput = {
    AND?: PostArquivoWhereInput | PostArquivoWhereInput[]
    OR?: PostArquivoWhereInput[]
    NOT?: PostArquivoWhereInput | PostArquivoWhereInput[]
    id?: IntFilter<"PostArquivo"> | number
    nome?: StringFilter<"PostArquivo"> | string
    url?: StringFilter<"PostArquivo"> | string
    tipo?: StringFilter<"PostArquivo"> | string
    tamanho?: IntNullableFilter<"PostArquivo"> | number | null
    post_id?: IntFilter<"PostArquivo"> | number
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
  }

  export type PostArquivoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    url?: SortOrder
    tipo?: SortOrder
    tamanho?: SortOrderInput | SortOrder
    post_id?: SortOrder
    post?: PostOrderByWithRelationInput
  }

  export type PostArquivoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PostArquivoWhereInput | PostArquivoWhereInput[]
    OR?: PostArquivoWhereInput[]
    NOT?: PostArquivoWhereInput | PostArquivoWhereInput[]
    nome?: StringFilter<"PostArquivo"> | string
    url?: StringFilter<"PostArquivo"> | string
    tipo?: StringFilter<"PostArquivo"> | string
    tamanho?: IntNullableFilter<"PostArquivo"> | number | null
    post_id?: IntFilter<"PostArquivo"> | number
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
  }, "id">

  export type PostArquivoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    url?: SortOrder
    tipo?: SortOrder
    tamanho?: SortOrderInput | SortOrder
    post_id?: SortOrder
    _count?: PostArquivoCountOrderByAggregateInput
    _avg?: PostArquivoAvgOrderByAggregateInput
    _max?: PostArquivoMaxOrderByAggregateInput
    _min?: PostArquivoMinOrderByAggregateInput
    _sum?: PostArquivoSumOrderByAggregateInput
  }

  export type PostArquivoScalarWhereWithAggregatesInput = {
    AND?: PostArquivoScalarWhereWithAggregatesInput | PostArquivoScalarWhereWithAggregatesInput[]
    OR?: PostArquivoScalarWhereWithAggregatesInput[]
    NOT?: PostArquivoScalarWhereWithAggregatesInput | PostArquivoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PostArquivo"> | number
    nome?: StringWithAggregatesFilter<"PostArquivo"> | string
    url?: StringWithAggregatesFilter<"PostArquivo"> | string
    tipo?: StringWithAggregatesFilter<"PostArquivo"> | string
    tamanho?: IntNullableWithAggregatesFilter<"PostArquivo"> | number | null
    post_id?: IntWithAggregatesFilter<"PostArquivo"> | number
  }

  export type ProfessorCreateInput = {
    nome: string
    email: string
    senha: string
    avatar?: string | null
    posts?: PostCreateNestedManyWithoutProfessorInput
    turmas?: ProfessorTurmaCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorUncheckedCreateInput = {
    id?: number
    nome: string
    email: string
    senha: string
    avatar?: string | null
    posts?: PostUncheckedCreateNestedManyWithoutProfessorInput
    turmas?: ProfessorTurmaUncheckedCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    posts?: PostUpdateManyWithoutProfessorNestedInput
    turmas?: ProfessorTurmaUpdateManyWithoutProfessorNestedInput
  }

  export type ProfessorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    posts?: PostUncheckedUpdateManyWithoutProfessorNestedInput
    turmas?: ProfessorTurmaUncheckedUpdateManyWithoutProfessorNestedInput
  }

  export type ProfessorCreateManyInput = {
    id?: number
    nome: string
    email: string
    senha: string
    avatar?: string | null
  }

  export type ProfessorUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfessorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TurmaCreateInput = {
    nome: string
    icon?: string | null
    posts?: PostCreateNestedManyWithoutTurmaInput
    professores?: ProfessorTurmaCreateNestedManyWithoutTurmaInput
  }

  export type TurmaUncheckedCreateInput = {
    id?: number
    nome: string
    icon?: string | null
    posts?: PostUncheckedCreateNestedManyWithoutTurmaInput
    professores?: ProfessorTurmaUncheckedCreateNestedManyWithoutTurmaInput
  }

  export type TurmaUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    posts?: PostUpdateManyWithoutTurmaNestedInput
    professores?: ProfessorTurmaUpdateManyWithoutTurmaNestedInput
  }

  export type TurmaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    posts?: PostUncheckedUpdateManyWithoutTurmaNestedInput
    professores?: ProfessorTurmaUncheckedUpdateManyWithoutTurmaNestedInput
  }

  export type TurmaCreateManyInput = {
    id?: number
    nome: string
    icon?: string | null
  }

  export type TurmaUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TurmaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfessorTurmaCreateInput = {
    professor: ProfessorCreateNestedOneWithoutTurmasInput
    turma: TurmaCreateNestedOneWithoutProfessoresInput
  }

  export type ProfessorTurmaUncheckedCreateInput = {
    professor_id: number
    turma_id: number
  }

  export type ProfessorTurmaUpdateInput = {
    professor?: ProfessorUpdateOneRequiredWithoutTurmasNestedInput
    turma?: TurmaUpdateOneRequiredWithoutProfessoresNestedInput
  }

  export type ProfessorTurmaUncheckedUpdateInput = {
    professor_id?: IntFieldUpdateOperationsInput | number
    turma_id?: IntFieldUpdateOperationsInput | number
  }

  export type ProfessorTurmaCreateManyInput = {
    professor_id: number
    turma_id: number
  }

  export type ProfessorTurmaUpdateManyMutationInput = {

  }

  export type ProfessorTurmaUncheckedUpdateManyInput = {
    professor_id?: IntFieldUpdateOperationsInput | number
    turma_id?: IntFieldUpdateOperationsInput | number
  }

  export type PostCreateInput = {
    titulo: string
    conteudo: string
    data_criacao?: Date | string
    data_atualizacao?: Date | string | null
    professor: ProfessorCreateNestedOneWithoutPostsInput
    turma: TurmaCreateNestedOneWithoutPostsInput
    arquivos?: PostArquivoCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateInput = {
    id?: number
    titulo: string
    conteudo: string
    data_criacao?: Date | string
    data_atualizacao?: Date | string | null
    professor_id: number
    turma_id: number
    arquivos?: PostArquivoUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostUpdateInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    conteudo?: StringFieldUpdateOperationsInput | string
    data_criacao?: DateTimeFieldUpdateOperationsInput | Date | string
    data_atualizacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    professor?: ProfessorUpdateOneRequiredWithoutPostsNestedInput
    turma?: TurmaUpdateOneRequiredWithoutPostsNestedInput
    arquivos?: PostArquivoUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    conteudo?: StringFieldUpdateOperationsInput | string
    data_criacao?: DateTimeFieldUpdateOperationsInput | Date | string
    data_atualizacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    professor_id?: IntFieldUpdateOperationsInput | number
    turma_id?: IntFieldUpdateOperationsInput | number
    arquivos?: PostArquivoUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostCreateManyInput = {
    id?: number
    titulo: string
    conteudo: string
    data_criacao?: Date | string
    data_atualizacao?: Date | string | null
    professor_id: number
    turma_id: number
  }

  export type PostUpdateManyMutationInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    conteudo?: StringFieldUpdateOperationsInput | string
    data_criacao?: DateTimeFieldUpdateOperationsInput | Date | string
    data_atualizacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PostUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    conteudo?: StringFieldUpdateOperationsInput | string
    data_criacao?: DateTimeFieldUpdateOperationsInput | Date | string
    data_atualizacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    professor_id?: IntFieldUpdateOperationsInput | number
    turma_id?: IntFieldUpdateOperationsInput | number
  }

  export type PostArquivoCreateInput = {
    nome: string
    url: string
    tipo: string
    tamanho?: number | null
    post: PostCreateNestedOneWithoutArquivosInput
  }

  export type PostArquivoUncheckedCreateInput = {
    id?: number
    nome: string
    url: string
    tipo: string
    tamanho?: number | null
    post_id: number
  }

  export type PostArquivoUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    tamanho?: NullableIntFieldUpdateOperationsInput | number | null
    post?: PostUpdateOneRequiredWithoutArquivosNestedInput
  }

  export type PostArquivoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    tamanho?: NullableIntFieldUpdateOperationsInput | number | null
    post_id?: IntFieldUpdateOperationsInput | number
  }

  export type PostArquivoCreateManyInput = {
    id?: number
    nome: string
    url: string
    tipo: string
    tamanho?: number | null
    post_id: number
  }

  export type PostArquivoUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    tamanho?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PostArquivoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    tamanho?: NullableIntFieldUpdateOperationsInput | number | null
    post_id?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type PostListRelationFilter = {
    every?: PostWhereInput
    some?: PostWhereInput
    none?: PostWhereInput
  }

  export type ProfessorTurmaListRelationFilter = {
    every?: ProfessorTurmaWhereInput
    some?: ProfessorTurmaWhereInput
    none?: ProfessorTurmaWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProfessorTurmaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProfessorCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    avatar?: SortOrder
  }

  export type ProfessorAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProfessorMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    avatar?: SortOrder
  }

  export type ProfessorMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    avatar?: SortOrder
  }

  export type ProfessorSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type TurmaCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    icon?: SortOrder
  }

  export type TurmaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TurmaMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    icon?: SortOrder
  }

  export type TurmaMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    icon?: SortOrder
  }

  export type TurmaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProfessorScalarRelationFilter = {
    is?: ProfessorWhereInput
    isNot?: ProfessorWhereInput
  }

  export type TurmaScalarRelationFilter = {
    is?: TurmaWhereInput
    isNot?: TurmaWhereInput
  }

  export type ProfessorTurmaProfessor_idTurma_idCompoundUniqueInput = {
    professor_id: number
    turma_id: number
  }

  export type ProfessorTurmaCountOrderByAggregateInput = {
    professor_id?: SortOrder
    turma_id?: SortOrder
  }

  export type ProfessorTurmaAvgOrderByAggregateInput = {
    professor_id?: SortOrder
    turma_id?: SortOrder
  }

  export type ProfessorTurmaMaxOrderByAggregateInput = {
    professor_id?: SortOrder
    turma_id?: SortOrder
  }

  export type ProfessorTurmaMinOrderByAggregateInput = {
    professor_id?: SortOrder
    turma_id?: SortOrder
  }

  export type ProfessorTurmaSumOrderByAggregateInput = {
    professor_id?: SortOrder
    turma_id?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type PostArquivoListRelationFilter = {
    every?: PostArquivoWhereInput
    some?: PostArquivoWhereInput
    none?: PostArquivoWhereInput
  }

  export type PostArquivoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PostCountOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    conteudo?: SortOrder
    data_criacao?: SortOrder
    data_atualizacao?: SortOrder
    professor_id?: SortOrder
    turma_id?: SortOrder
  }

  export type PostAvgOrderByAggregateInput = {
    id?: SortOrder
    professor_id?: SortOrder
    turma_id?: SortOrder
  }

  export type PostMaxOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    conteudo?: SortOrder
    data_criacao?: SortOrder
    data_atualizacao?: SortOrder
    professor_id?: SortOrder
    turma_id?: SortOrder
  }

  export type PostMinOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    conteudo?: SortOrder
    data_criacao?: SortOrder
    data_atualizacao?: SortOrder
    professor_id?: SortOrder
    turma_id?: SortOrder
  }

  export type PostSumOrderByAggregateInput = {
    id?: SortOrder
    professor_id?: SortOrder
    turma_id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type PostScalarRelationFilter = {
    is?: PostWhereInput
    isNot?: PostWhereInput
  }

  export type PostArquivoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    url?: SortOrder
    tipo?: SortOrder
    tamanho?: SortOrder
    post_id?: SortOrder
  }

  export type PostArquivoAvgOrderByAggregateInput = {
    id?: SortOrder
    tamanho?: SortOrder
    post_id?: SortOrder
  }

  export type PostArquivoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    url?: SortOrder
    tipo?: SortOrder
    tamanho?: SortOrder
    post_id?: SortOrder
  }

  export type PostArquivoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    url?: SortOrder
    tipo?: SortOrder
    tamanho?: SortOrder
    post_id?: SortOrder
  }

  export type PostArquivoSumOrderByAggregateInput = {
    id?: SortOrder
    tamanho?: SortOrder
    post_id?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type PostCreateNestedManyWithoutProfessorInput = {
    create?: XOR<PostCreateWithoutProfessorInput, PostUncheckedCreateWithoutProfessorInput> | PostCreateWithoutProfessorInput[] | PostUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: PostCreateOrConnectWithoutProfessorInput | PostCreateOrConnectWithoutProfessorInput[]
    createMany?: PostCreateManyProfessorInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type ProfessorTurmaCreateNestedManyWithoutProfessorInput = {
    create?: XOR<ProfessorTurmaCreateWithoutProfessorInput, ProfessorTurmaUncheckedCreateWithoutProfessorInput> | ProfessorTurmaCreateWithoutProfessorInput[] | ProfessorTurmaUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: ProfessorTurmaCreateOrConnectWithoutProfessorInput | ProfessorTurmaCreateOrConnectWithoutProfessorInput[]
    createMany?: ProfessorTurmaCreateManyProfessorInputEnvelope
    connect?: ProfessorTurmaWhereUniqueInput | ProfessorTurmaWhereUniqueInput[]
  }

  export type PostUncheckedCreateNestedManyWithoutProfessorInput = {
    create?: XOR<PostCreateWithoutProfessorInput, PostUncheckedCreateWithoutProfessorInput> | PostCreateWithoutProfessorInput[] | PostUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: PostCreateOrConnectWithoutProfessorInput | PostCreateOrConnectWithoutProfessorInput[]
    createMany?: PostCreateManyProfessorInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type ProfessorTurmaUncheckedCreateNestedManyWithoutProfessorInput = {
    create?: XOR<ProfessorTurmaCreateWithoutProfessorInput, ProfessorTurmaUncheckedCreateWithoutProfessorInput> | ProfessorTurmaCreateWithoutProfessorInput[] | ProfessorTurmaUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: ProfessorTurmaCreateOrConnectWithoutProfessorInput | ProfessorTurmaCreateOrConnectWithoutProfessorInput[]
    createMany?: ProfessorTurmaCreateManyProfessorInputEnvelope
    connect?: ProfessorTurmaWhereUniqueInput | ProfessorTurmaWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type PostUpdateManyWithoutProfessorNestedInput = {
    create?: XOR<PostCreateWithoutProfessorInput, PostUncheckedCreateWithoutProfessorInput> | PostCreateWithoutProfessorInput[] | PostUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: PostCreateOrConnectWithoutProfessorInput | PostCreateOrConnectWithoutProfessorInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutProfessorInput | PostUpsertWithWhereUniqueWithoutProfessorInput[]
    createMany?: PostCreateManyProfessorInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutProfessorInput | PostUpdateWithWhereUniqueWithoutProfessorInput[]
    updateMany?: PostUpdateManyWithWhereWithoutProfessorInput | PostUpdateManyWithWhereWithoutProfessorInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type ProfessorTurmaUpdateManyWithoutProfessorNestedInput = {
    create?: XOR<ProfessorTurmaCreateWithoutProfessorInput, ProfessorTurmaUncheckedCreateWithoutProfessorInput> | ProfessorTurmaCreateWithoutProfessorInput[] | ProfessorTurmaUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: ProfessorTurmaCreateOrConnectWithoutProfessorInput | ProfessorTurmaCreateOrConnectWithoutProfessorInput[]
    upsert?: ProfessorTurmaUpsertWithWhereUniqueWithoutProfessorInput | ProfessorTurmaUpsertWithWhereUniqueWithoutProfessorInput[]
    createMany?: ProfessorTurmaCreateManyProfessorInputEnvelope
    set?: ProfessorTurmaWhereUniqueInput | ProfessorTurmaWhereUniqueInput[]
    disconnect?: ProfessorTurmaWhereUniqueInput | ProfessorTurmaWhereUniqueInput[]
    delete?: ProfessorTurmaWhereUniqueInput | ProfessorTurmaWhereUniqueInput[]
    connect?: ProfessorTurmaWhereUniqueInput | ProfessorTurmaWhereUniqueInput[]
    update?: ProfessorTurmaUpdateWithWhereUniqueWithoutProfessorInput | ProfessorTurmaUpdateWithWhereUniqueWithoutProfessorInput[]
    updateMany?: ProfessorTurmaUpdateManyWithWhereWithoutProfessorInput | ProfessorTurmaUpdateManyWithWhereWithoutProfessorInput[]
    deleteMany?: ProfessorTurmaScalarWhereInput | ProfessorTurmaScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PostUncheckedUpdateManyWithoutProfessorNestedInput = {
    create?: XOR<PostCreateWithoutProfessorInput, PostUncheckedCreateWithoutProfessorInput> | PostCreateWithoutProfessorInput[] | PostUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: PostCreateOrConnectWithoutProfessorInput | PostCreateOrConnectWithoutProfessorInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutProfessorInput | PostUpsertWithWhereUniqueWithoutProfessorInput[]
    createMany?: PostCreateManyProfessorInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutProfessorInput | PostUpdateWithWhereUniqueWithoutProfessorInput[]
    updateMany?: PostUpdateManyWithWhereWithoutProfessorInput | PostUpdateManyWithWhereWithoutProfessorInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type ProfessorTurmaUncheckedUpdateManyWithoutProfessorNestedInput = {
    create?: XOR<ProfessorTurmaCreateWithoutProfessorInput, ProfessorTurmaUncheckedCreateWithoutProfessorInput> | ProfessorTurmaCreateWithoutProfessorInput[] | ProfessorTurmaUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: ProfessorTurmaCreateOrConnectWithoutProfessorInput | ProfessorTurmaCreateOrConnectWithoutProfessorInput[]
    upsert?: ProfessorTurmaUpsertWithWhereUniqueWithoutProfessorInput | ProfessorTurmaUpsertWithWhereUniqueWithoutProfessorInput[]
    createMany?: ProfessorTurmaCreateManyProfessorInputEnvelope
    set?: ProfessorTurmaWhereUniqueInput | ProfessorTurmaWhereUniqueInput[]
    disconnect?: ProfessorTurmaWhereUniqueInput | ProfessorTurmaWhereUniqueInput[]
    delete?: ProfessorTurmaWhereUniqueInput | ProfessorTurmaWhereUniqueInput[]
    connect?: ProfessorTurmaWhereUniqueInput | ProfessorTurmaWhereUniqueInput[]
    update?: ProfessorTurmaUpdateWithWhereUniqueWithoutProfessorInput | ProfessorTurmaUpdateWithWhereUniqueWithoutProfessorInput[]
    updateMany?: ProfessorTurmaUpdateManyWithWhereWithoutProfessorInput | ProfessorTurmaUpdateManyWithWhereWithoutProfessorInput[]
    deleteMany?: ProfessorTurmaScalarWhereInput | ProfessorTurmaScalarWhereInput[]
  }

  export type PostCreateNestedManyWithoutTurmaInput = {
    create?: XOR<PostCreateWithoutTurmaInput, PostUncheckedCreateWithoutTurmaInput> | PostCreateWithoutTurmaInput[] | PostUncheckedCreateWithoutTurmaInput[]
    connectOrCreate?: PostCreateOrConnectWithoutTurmaInput | PostCreateOrConnectWithoutTurmaInput[]
    createMany?: PostCreateManyTurmaInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type ProfessorTurmaCreateNestedManyWithoutTurmaInput = {
    create?: XOR<ProfessorTurmaCreateWithoutTurmaInput, ProfessorTurmaUncheckedCreateWithoutTurmaInput> | ProfessorTurmaCreateWithoutTurmaInput[] | ProfessorTurmaUncheckedCreateWithoutTurmaInput[]
    connectOrCreate?: ProfessorTurmaCreateOrConnectWithoutTurmaInput | ProfessorTurmaCreateOrConnectWithoutTurmaInput[]
    createMany?: ProfessorTurmaCreateManyTurmaInputEnvelope
    connect?: ProfessorTurmaWhereUniqueInput | ProfessorTurmaWhereUniqueInput[]
  }

  export type PostUncheckedCreateNestedManyWithoutTurmaInput = {
    create?: XOR<PostCreateWithoutTurmaInput, PostUncheckedCreateWithoutTurmaInput> | PostCreateWithoutTurmaInput[] | PostUncheckedCreateWithoutTurmaInput[]
    connectOrCreate?: PostCreateOrConnectWithoutTurmaInput | PostCreateOrConnectWithoutTurmaInput[]
    createMany?: PostCreateManyTurmaInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type ProfessorTurmaUncheckedCreateNestedManyWithoutTurmaInput = {
    create?: XOR<ProfessorTurmaCreateWithoutTurmaInput, ProfessorTurmaUncheckedCreateWithoutTurmaInput> | ProfessorTurmaCreateWithoutTurmaInput[] | ProfessorTurmaUncheckedCreateWithoutTurmaInput[]
    connectOrCreate?: ProfessorTurmaCreateOrConnectWithoutTurmaInput | ProfessorTurmaCreateOrConnectWithoutTurmaInput[]
    createMany?: ProfessorTurmaCreateManyTurmaInputEnvelope
    connect?: ProfessorTurmaWhereUniqueInput | ProfessorTurmaWhereUniqueInput[]
  }

  export type PostUpdateManyWithoutTurmaNestedInput = {
    create?: XOR<PostCreateWithoutTurmaInput, PostUncheckedCreateWithoutTurmaInput> | PostCreateWithoutTurmaInput[] | PostUncheckedCreateWithoutTurmaInput[]
    connectOrCreate?: PostCreateOrConnectWithoutTurmaInput | PostCreateOrConnectWithoutTurmaInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutTurmaInput | PostUpsertWithWhereUniqueWithoutTurmaInput[]
    createMany?: PostCreateManyTurmaInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutTurmaInput | PostUpdateWithWhereUniqueWithoutTurmaInput[]
    updateMany?: PostUpdateManyWithWhereWithoutTurmaInput | PostUpdateManyWithWhereWithoutTurmaInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type ProfessorTurmaUpdateManyWithoutTurmaNestedInput = {
    create?: XOR<ProfessorTurmaCreateWithoutTurmaInput, ProfessorTurmaUncheckedCreateWithoutTurmaInput> | ProfessorTurmaCreateWithoutTurmaInput[] | ProfessorTurmaUncheckedCreateWithoutTurmaInput[]
    connectOrCreate?: ProfessorTurmaCreateOrConnectWithoutTurmaInput | ProfessorTurmaCreateOrConnectWithoutTurmaInput[]
    upsert?: ProfessorTurmaUpsertWithWhereUniqueWithoutTurmaInput | ProfessorTurmaUpsertWithWhereUniqueWithoutTurmaInput[]
    createMany?: ProfessorTurmaCreateManyTurmaInputEnvelope
    set?: ProfessorTurmaWhereUniqueInput | ProfessorTurmaWhereUniqueInput[]
    disconnect?: ProfessorTurmaWhereUniqueInput | ProfessorTurmaWhereUniqueInput[]
    delete?: ProfessorTurmaWhereUniqueInput | ProfessorTurmaWhereUniqueInput[]
    connect?: ProfessorTurmaWhereUniqueInput | ProfessorTurmaWhereUniqueInput[]
    update?: ProfessorTurmaUpdateWithWhereUniqueWithoutTurmaInput | ProfessorTurmaUpdateWithWhereUniqueWithoutTurmaInput[]
    updateMany?: ProfessorTurmaUpdateManyWithWhereWithoutTurmaInput | ProfessorTurmaUpdateManyWithWhereWithoutTurmaInput[]
    deleteMany?: ProfessorTurmaScalarWhereInput | ProfessorTurmaScalarWhereInput[]
  }

  export type PostUncheckedUpdateManyWithoutTurmaNestedInput = {
    create?: XOR<PostCreateWithoutTurmaInput, PostUncheckedCreateWithoutTurmaInput> | PostCreateWithoutTurmaInput[] | PostUncheckedCreateWithoutTurmaInput[]
    connectOrCreate?: PostCreateOrConnectWithoutTurmaInput | PostCreateOrConnectWithoutTurmaInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutTurmaInput | PostUpsertWithWhereUniqueWithoutTurmaInput[]
    createMany?: PostCreateManyTurmaInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutTurmaInput | PostUpdateWithWhereUniqueWithoutTurmaInput[]
    updateMany?: PostUpdateManyWithWhereWithoutTurmaInput | PostUpdateManyWithWhereWithoutTurmaInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type ProfessorTurmaUncheckedUpdateManyWithoutTurmaNestedInput = {
    create?: XOR<ProfessorTurmaCreateWithoutTurmaInput, ProfessorTurmaUncheckedCreateWithoutTurmaInput> | ProfessorTurmaCreateWithoutTurmaInput[] | ProfessorTurmaUncheckedCreateWithoutTurmaInput[]
    connectOrCreate?: ProfessorTurmaCreateOrConnectWithoutTurmaInput | ProfessorTurmaCreateOrConnectWithoutTurmaInput[]
    upsert?: ProfessorTurmaUpsertWithWhereUniqueWithoutTurmaInput | ProfessorTurmaUpsertWithWhereUniqueWithoutTurmaInput[]
    createMany?: ProfessorTurmaCreateManyTurmaInputEnvelope
    set?: ProfessorTurmaWhereUniqueInput | ProfessorTurmaWhereUniqueInput[]
    disconnect?: ProfessorTurmaWhereUniqueInput | ProfessorTurmaWhereUniqueInput[]
    delete?: ProfessorTurmaWhereUniqueInput | ProfessorTurmaWhereUniqueInput[]
    connect?: ProfessorTurmaWhereUniqueInput | ProfessorTurmaWhereUniqueInput[]
    update?: ProfessorTurmaUpdateWithWhereUniqueWithoutTurmaInput | ProfessorTurmaUpdateWithWhereUniqueWithoutTurmaInput[]
    updateMany?: ProfessorTurmaUpdateManyWithWhereWithoutTurmaInput | ProfessorTurmaUpdateManyWithWhereWithoutTurmaInput[]
    deleteMany?: ProfessorTurmaScalarWhereInput | ProfessorTurmaScalarWhereInput[]
  }

  export type ProfessorCreateNestedOneWithoutTurmasInput = {
    create?: XOR<ProfessorCreateWithoutTurmasInput, ProfessorUncheckedCreateWithoutTurmasInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutTurmasInput
    connect?: ProfessorWhereUniqueInput
  }

  export type TurmaCreateNestedOneWithoutProfessoresInput = {
    create?: XOR<TurmaCreateWithoutProfessoresInput, TurmaUncheckedCreateWithoutProfessoresInput>
    connectOrCreate?: TurmaCreateOrConnectWithoutProfessoresInput
    connect?: TurmaWhereUniqueInput
  }

  export type ProfessorUpdateOneRequiredWithoutTurmasNestedInput = {
    create?: XOR<ProfessorCreateWithoutTurmasInput, ProfessorUncheckedCreateWithoutTurmasInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutTurmasInput
    upsert?: ProfessorUpsertWithoutTurmasInput
    connect?: ProfessorWhereUniqueInput
    update?: XOR<XOR<ProfessorUpdateToOneWithWhereWithoutTurmasInput, ProfessorUpdateWithoutTurmasInput>, ProfessorUncheckedUpdateWithoutTurmasInput>
  }

  export type TurmaUpdateOneRequiredWithoutProfessoresNestedInput = {
    create?: XOR<TurmaCreateWithoutProfessoresInput, TurmaUncheckedCreateWithoutProfessoresInput>
    connectOrCreate?: TurmaCreateOrConnectWithoutProfessoresInput
    upsert?: TurmaUpsertWithoutProfessoresInput
    connect?: TurmaWhereUniqueInput
    update?: XOR<XOR<TurmaUpdateToOneWithWhereWithoutProfessoresInput, TurmaUpdateWithoutProfessoresInput>, TurmaUncheckedUpdateWithoutProfessoresInput>
  }

  export type ProfessorCreateNestedOneWithoutPostsInput = {
    create?: XOR<ProfessorCreateWithoutPostsInput, ProfessorUncheckedCreateWithoutPostsInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutPostsInput
    connect?: ProfessorWhereUniqueInput
  }

  export type TurmaCreateNestedOneWithoutPostsInput = {
    create?: XOR<TurmaCreateWithoutPostsInput, TurmaUncheckedCreateWithoutPostsInput>
    connectOrCreate?: TurmaCreateOrConnectWithoutPostsInput
    connect?: TurmaWhereUniqueInput
  }

  export type PostArquivoCreateNestedManyWithoutPostInput = {
    create?: XOR<PostArquivoCreateWithoutPostInput, PostArquivoUncheckedCreateWithoutPostInput> | PostArquivoCreateWithoutPostInput[] | PostArquivoUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostArquivoCreateOrConnectWithoutPostInput | PostArquivoCreateOrConnectWithoutPostInput[]
    createMany?: PostArquivoCreateManyPostInputEnvelope
    connect?: PostArquivoWhereUniqueInput | PostArquivoWhereUniqueInput[]
  }

  export type PostArquivoUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<PostArquivoCreateWithoutPostInput, PostArquivoUncheckedCreateWithoutPostInput> | PostArquivoCreateWithoutPostInput[] | PostArquivoUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostArquivoCreateOrConnectWithoutPostInput | PostArquivoCreateOrConnectWithoutPostInput[]
    createMany?: PostArquivoCreateManyPostInputEnvelope
    connect?: PostArquivoWhereUniqueInput | PostArquivoWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ProfessorUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<ProfessorCreateWithoutPostsInput, ProfessorUncheckedCreateWithoutPostsInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutPostsInput
    upsert?: ProfessorUpsertWithoutPostsInput
    connect?: ProfessorWhereUniqueInput
    update?: XOR<XOR<ProfessorUpdateToOneWithWhereWithoutPostsInput, ProfessorUpdateWithoutPostsInput>, ProfessorUncheckedUpdateWithoutPostsInput>
  }

  export type TurmaUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<TurmaCreateWithoutPostsInput, TurmaUncheckedCreateWithoutPostsInput>
    connectOrCreate?: TurmaCreateOrConnectWithoutPostsInput
    upsert?: TurmaUpsertWithoutPostsInput
    connect?: TurmaWhereUniqueInput
    update?: XOR<XOR<TurmaUpdateToOneWithWhereWithoutPostsInput, TurmaUpdateWithoutPostsInput>, TurmaUncheckedUpdateWithoutPostsInput>
  }

  export type PostArquivoUpdateManyWithoutPostNestedInput = {
    create?: XOR<PostArquivoCreateWithoutPostInput, PostArquivoUncheckedCreateWithoutPostInput> | PostArquivoCreateWithoutPostInput[] | PostArquivoUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostArquivoCreateOrConnectWithoutPostInput | PostArquivoCreateOrConnectWithoutPostInput[]
    upsert?: PostArquivoUpsertWithWhereUniqueWithoutPostInput | PostArquivoUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: PostArquivoCreateManyPostInputEnvelope
    set?: PostArquivoWhereUniqueInput | PostArquivoWhereUniqueInput[]
    disconnect?: PostArquivoWhereUniqueInput | PostArquivoWhereUniqueInput[]
    delete?: PostArquivoWhereUniqueInput | PostArquivoWhereUniqueInput[]
    connect?: PostArquivoWhereUniqueInput | PostArquivoWhereUniqueInput[]
    update?: PostArquivoUpdateWithWhereUniqueWithoutPostInput | PostArquivoUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: PostArquivoUpdateManyWithWhereWithoutPostInput | PostArquivoUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: PostArquivoScalarWhereInput | PostArquivoScalarWhereInput[]
  }

  export type PostArquivoUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<PostArquivoCreateWithoutPostInput, PostArquivoUncheckedCreateWithoutPostInput> | PostArquivoCreateWithoutPostInput[] | PostArquivoUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostArquivoCreateOrConnectWithoutPostInput | PostArquivoCreateOrConnectWithoutPostInput[]
    upsert?: PostArquivoUpsertWithWhereUniqueWithoutPostInput | PostArquivoUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: PostArquivoCreateManyPostInputEnvelope
    set?: PostArquivoWhereUniqueInput | PostArquivoWhereUniqueInput[]
    disconnect?: PostArquivoWhereUniqueInput | PostArquivoWhereUniqueInput[]
    delete?: PostArquivoWhereUniqueInput | PostArquivoWhereUniqueInput[]
    connect?: PostArquivoWhereUniqueInput | PostArquivoWhereUniqueInput[]
    update?: PostArquivoUpdateWithWhereUniqueWithoutPostInput | PostArquivoUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: PostArquivoUpdateManyWithWhereWithoutPostInput | PostArquivoUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: PostArquivoScalarWhereInput | PostArquivoScalarWhereInput[]
  }

  export type PostCreateNestedOneWithoutArquivosInput = {
    create?: XOR<PostCreateWithoutArquivosInput, PostUncheckedCreateWithoutArquivosInput>
    connectOrCreate?: PostCreateOrConnectWithoutArquivosInput
    connect?: PostWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PostUpdateOneRequiredWithoutArquivosNestedInput = {
    create?: XOR<PostCreateWithoutArquivosInput, PostUncheckedCreateWithoutArquivosInput>
    connectOrCreate?: PostCreateOrConnectWithoutArquivosInput
    upsert?: PostUpsertWithoutArquivosInput
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutArquivosInput, PostUpdateWithoutArquivosInput>, PostUncheckedUpdateWithoutArquivosInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type PostCreateWithoutProfessorInput = {
    titulo: string
    conteudo: string
    data_criacao?: Date | string
    data_atualizacao?: Date | string | null
    turma: TurmaCreateNestedOneWithoutPostsInput
    arquivos?: PostArquivoCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutProfessorInput = {
    id?: number
    titulo: string
    conteudo: string
    data_criacao?: Date | string
    data_atualizacao?: Date | string | null
    turma_id: number
    arquivos?: PostArquivoUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutProfessorInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutProfessorInput, PostUncheckedCreateWithoutProfessorInput>
  }

  export type PostCreateManyProfessorInputEnvelope = {
    data: PostCreateManyProfessorInput | PostCreateManyProfessorInput[]
    skipDuplicates?: boolean
  }

  export type ProfessorTurmaCreateWithoutProfessorInput = {
    turma: TurmaCreateNestedOneWithoutProfessoresInput
  }

  export type ProfessorTurmaUncheckedCreateWithoutProfessorInput = {
    turma_id: number
  }

  export type ProfessorTurmaCreateOrConnectWithoutProfessorInput = {
    where: ProfessorTurmaWhereUniqueInput
    create: XOR<ProfessorTurmaCreateWithoutProfessorInput, ProfessorTurmaUncheckedCreateWithoutProfessorInput>
  }

  export type ProfessorTurmaCreateManyProfessorInputEnvelope = {
    data: ProfessorTurmaCreateManyProfessorInput | ProfessorTurmaCreateManyProfessorInput[]
    skipDuplicates?: boolean
  }

  export type PostUpsertWithWhereUniqueWithoutProfessorInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutProfessorInput, PostUncheckedUpdateWithoutProfessorInput>
    create: XOR<PostCreateWithoutProfessorInput, PostUncheckedCreateWithoutProfessorInput>
  }

  export type PostUpdateWithWhereUniqueWithoutProfessorInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutProfessorInput, PostUncheckedUpdateWithoutProfessorInput>
  }

  export type PostUpdateManyWithWhereWithoutProfessorInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutProfessorInput>
  }

  export type PostScalarWhereInput = {
    AND?: PostScalarWhereInput | PostScalarWhereInput[]
    OR?: PostScalarWhereInput[]
    NOT?: PostScalarWhereInput | PostScalarWhereInput[]
    id?: IntFilter<"Post"> | number
    titulo?: StringFilter<"Post"> | string
    conteudo?: StringFilter<"Post"> | string
    data_criacao?: DateTimeFilter<"Post"> | Date | string
    data_atualizacao?: DateTimeNullableFilter<"Post"> | Date | string | null
    professor_id?: IntFilter<"Post"> | number
    turma_id?: IntFilter<"Post"> | number
  }

  export type ProfessorTurmaUpsertWithWhereUniqueWithoutProfessorInput = {
    where: ProfessorTurmaWhereUniqueInput
    update: XOR<ProfessorTurmaUpdateWithoutProfessorInput, ProfessorTurmaUncheckedUpdateWithoutProfessorInput>
    create: XOR<ProfessorTurmaCreateWithoutProfessorInput, ProfessorTurmaUncheckedCreateWithoutProfessorInput>
  }

  export type ProfessorTurmaUpdateWithWhereUniqueWithoutProfessorInput = {
    where: ProfessorTurmaWhereUniqueInput
    data: XOR<ProfessorTurmaUpdateWithoutProfessorInput, ProfessorTurmaUncheckedUpdateWithoutProfessorInput>
  }

  export type ProfessorTurmaUpdateManyWithWhereWithoutProfessorInput = {
    where: ProfessorTurmaScalarWhereInput
    data: XOR<ProfessorTurmaUpdateManyMutationInput, ProfessorTurmaUncheckedUpdateManyWithoutProfessorInput>
  }

  export type ProfessorTurmaScalarWhereInput = {
    AND?: ProfessorTurmaScalarWhereInput | ProfessorTurmaScalarWhereInput[]
    OR?: ProfessorTurmaScalarWhereInput[]
    NOT?: ProfessorTurmaScalarWhereInput | ProfessorTurmaScalarWhereInput[]
    professor_id?: IntFilter<"ProfessorTurma"> | number
    turma_id?: IntFilter<"ProfessorTurma"> | number
  }

  export type PostCreateWithoutTurmaInput = {
    titulo: string
    conteudo: string
    data_criacao?: Date | string
    data_atualizacao?: Date | string | null
    professor: ProfessorCreateNestedOneWithoutPostsInput
    arquivos?: PostArquivoCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutTurmaInput = {
    id?: number
    titulo: string
    conteudo: string
    data_criacao?: Date | string
    data_atualizacao?: Date | string | null
    professor_id: number
    arquivos?: PostArquivoUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutTurmaInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutTurmaInput, PostUncheckedCreateWithoutTurmaInput>
  }

  export type PostCreateManyTurmaInputEnvelope = {
    data: PostCreateManyTurmaInput | PostCreateManyTurmaInput[]
    skipDuplicates?: boolean
  }

  export type ProfessorTurmaCreateWithoutTurmaInput = {
    professor: ProfessorCreateNestedOneWithoutTurmasInput
  }

  export type ProfessorTurmaUncheckedCreateWithoutTurmaInput = {
    professor_id: number
  }

  export type ProfessorTurmaCreateOrConnectWithoutTurmaInput = {
    where: ProfessorTurmaWhereUniqueInput
    create: XOR<ProfessorTurmaCreateWithoutTurmaInput, ProfessorTurmaUncheckedCreateWithoutTurmaInput>
  }

  export type ProfessorTurmaCreateManyTurmaInputEnvelope = {
    data: ProfessorTurmaCreateManyTurmaInput | ProfessorTurmaCreateManyTurmaInput[]
    skipDuplicates?: boolean
  }

  export type PostUpsertWithWhereUniqueWithoutTurmaInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutTurmaInput, PostUncheckedUpdateWithoutTurmaInput>
    create: XOR<PostCreateWithoutTurmaInput, PostUncheckedCreateWithoutTurmaInput>
  }

  export type PostUpdateWithWhereUniqueWithoutTurmaInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutTurmaInput, PostUncheckedUpdateWithoutTurmaInput>
  }

  export type PostUpdateManyWithWhereWithoutTurmaInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutTurmaInput>
  }

  export type ProfessorTurmaUpsertWithWhereUniqueWithoutTurmaInput = {
    where: ProfessorTurmaWhereUniqueInput
    update: XOR<ProfessorTurmaUpdateWithoutTurmaInput, ProfessorTurmaUncheckedUpdateWithoutTurmaInput>
    create: XOR<ProfessorTurmaCreateWithoutTurmaInput, ProfessorTurmaUncheckedCreateWithoutTurmaInput>
  }

  export type ProfessorTurmaUpdateWithWhereUniqueWithoutTurmaInput = {
    where: ProfessorTurmaWhereUniqueInput
    data: XOR<ProfessorTurmaUpdateWithoutTurmaInput, ProfessorTurmaUncheckedUpdateWithoutTurmaInput>
  }

  export type ProfessorTurmaUpdateManyWithWhereWithoutTurmaInput = {
    where: ProfessorTurmaScalarWhereInput
    data: XOR<ProfessorTurmaUpdateManyMutationInput, ProfessorTurmaUncheckedUpdateManyWithoutTurmaInput>
  }

  export type ProfessorCreateWithoutTurmasInput = {
    nome: string
    email: string
    senha: string
    avatar?: string | null
    posts?: PostCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorUncheckedCreateWithoutTurmasInput = {
    id?: number
    nome: string
    email: string
    senha: string
    avatar?: string | null
    posts?: PostUncheckedCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorCreateOrConnectWithoutTurmasInput = {
    where: ProfessorWhereUniqueInput
    create: XOR<ProfessorCreateWithoutTurmasInput, ProfessorUncheckedCreateWithoutTurmasInput>
  }

  export type TurmaCreateWithoutProfessoresInput = {
    nome: string
    icon?: string | null
    posts?: PostCreateNestedManyWithoutTurmaInput
  }

  export type TurmaUncheckedCreateWithoutProfessoresInput = {
    id?: number
    nome: string
    icon?: string | null
    posts?: PostUncheckedCreateNestedManyWithoutTurmaInput
  }

  export type TurmaCreateOrConnectWithoutProfessoresInput = {
    where: TurmaWhereUniqueInput
    create: XOR<TurmaCreateWithoutProfessoresInput, TurmaUncheckedCreateWithoutProfessoresInput>
  }

  export type ProfessorUpsertWithoutTurmasInput = {
    update: XOR<ProfessorUpdateWithoutTurmasInput, ProfessorUncheckedUpdateWithoutTurmasInput>
    create: XOR<ProfessorCreateWithoutTurmasInput, ProfessorUncheckedCreateWithoutTurmasInput>
    where?: ProfessorWhereInput
  }

  export type ProfessorUpdateToOneWithWhereWithoutTurmasInput = {
    where?: ProfessorWhereInput
    data: XOR<ProfessorUpdateWithoutTurmasInput, ProfessorUncheckedUpdateWithoutTurmasInput>
  }

  export type ProfessorUpdateWithoutTurmasInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    posts?: PostUpdateManyWithoutProfessorNestedInput
  }

  export type ProfessorUncheckedUpdateWithoutTurmasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    posts?: PostUncheckedUpdateManyWithoutProfessorNestedInput
  }

  export type TurmaUpsertWithoutProfessoresInput = {
    update: XOR<TurmaUpdateWithoutProfessoresInput, TurmaUncheckedUpdateWithoutProfessoresInput>
    create: XOR<TurmaCreateWithoutProfessoresInput, TurmaUncheckedCreateWithoutProfessoresInput>
    where?: TurmaWhereInput
  }

  export type TurmaUpdateToOneWithWhereWithoutProfessoresInput = {
    where?: TurmaWhereInput
    data: XOR<TurmaUpdateWithoutProfessoresInput, TurmaUncheckedUpdateWithoutProfessoresInput>
  }

  export type TurmaUpdateWithoutProfessoresInput = {
    nome?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    posts?: PostUpdateManyWithoutTurmaNestedInput
  }

  export type TurmaUncheckedUpdateWithoutProfessoresInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    posts?: PostUncheckedUpdateManyWithoutTurmaNestedInput
  }

  export type ProfessorCreateWithoutPostsInput = {
    nome: string
    email: string
    senha: string
    avatar?: string | null
    turmas?: ProfessorTurmaCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorUncheckedCreateWithoutPostsInput = {
    id?: number
    nome: string
    email: string
    senha: string
    avatar?: string | null
    turmas?: ProfessorTurmaUncheckedCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorCreateOrConnectWithoutPostsInput = {
    where: ProfessorWhereUniqueInput
    create: XOR<ProfessorCreateWithoutPostsInput, ProfessorUncheckedCreateWithoutPostsInput>
  }

  export type TurmaCreateWithoutPostsInput = {
    nome: string
    icon?: string | null
    professores?: ProfessorTurmaCreateNestedManyWithoutTurmaInput
  }

  export type TurmaUncheckedCreateWithoutPostsInput = {
    id?: number
    nome: string
    icon?: string | null
    professores?: ProfessorTurmaUncheckedCreateNestedManyWithoutTurmaInput
  }

  export type TurmaCreateOrConnectWithoutPostsInput = {
    where: TurmaWhereUniqueInput
    create: XOR<TurmaCreateWithoutPostsInput, TurmaUncheckedCreateWithoutPostsInput>
  }

  export type PostArquivoCreateWithoutPostInput = {
    nome: string
    url: string
    tipo: string
    tamanho?: number | null
  }

  export type PostArquivoUncheckedCreateWithoutPostInput = {
    id?: number
    nome: string
    url: string
    tipo: string
    tamanho?: number | null
  }

  export type PostArquivoCreateOrConnectWithoutPostInput = {
    where: PostArquivoWhereUniqueInput
    create: XOR<PostArquivoCreateWithoutPostInput, PostArquivoUncheckedCreateWithoutPostInput>
  }

  export type PostArquivoCreateManyPostInputEnvelope = {
    data: PostArquivoCreateManyPostInput | PostArquivoCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type ProfessorUpsertWithoutPostsInput = {
    update: XOR<ProfessorUpdateWithoutPostsInput, ProfessorUncheckedUpdateWithoutPostsInput>
    create: XOR<ProfessorCreateWithoutPostsInput, ProfessorUncheckedCreateWithoutPostsInput>
    where?: ProfessorWhereInput
  }

  export type ProfessorUpdateToOneWithWhereWithoutPostsInput = {
    where?: ProfessorWhereInput
    data: XOR<ProfessorUpdateWithoutPostsInput, ProfessorUncheckedUpdateWithoutPostsInput>
  }

  export type ProfessorUpdateWithoutPostsInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    turmas?: ProfessorTurmaUpdateManyWithoutProfessorNestedInput
  }

  export type ProfessorUncheckedUpdateWithoutPostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    turmas?: ProfessorTurmaUncheckedUpdateManyWithoutProfessorNestedInput
  }

  export type TurmaUpsertWithoutPostsInput = {
    update: XOR<TurmaUpdateWithoutPostsInput, TurmaUncheckedUpdateWithoutPostsInput>
    create: XOR<TurmaCreateWithoutPostsInput, TurmaUncheckedCreateWithoutPostsInput>
    where?: TurmaWhereInput
  }

  export type TurmaUpdateToOneWithWhereWithoutPostsInput = {
    where?: TurmaWhereInput
    data: XOR<TurmaUpdateWithoutPostsInput, TurmaUncheckedUpdateWithoutPostsInput>
  }

  export type TurmaUpdateWithoutPostsInput = {
    nome?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    professores?: ProfessorTurmaUpdateManyWithoutTurmaNestedInput
  }

  export type TurmaUncheckedUpdateWithoutPostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    professores?: ProfessorTurmaUncheckedUpdateManyWithoutTurmaNestedInput
  }

  export type PostArquivoUpsertWithWhereUniqueWithoutPostInput = {
    where: PostArquivoWhereUniqueInput
    update: XOR<PostArquivoUpdateWithoutPostInput, PostArquivoUncheckedUpdateWithoutPostInput>
    create: XOR<PostArquivoCreateWithoutPostInput, PostArquivoUncheckedCreateWithoutPostInput>
  }

  export type PostArquivoUpdateWithWhereUniqueWithoutPostInput = {
    where: PostArquivoWhereUniqueInput
    data: XOR<PostArquivoUpdateWithoutPostInput, PostArquivoUncheckedUpdateWithoutPostInput>
  }

  export type PostArquivoUpdateManyWithWhereWithoutPostInput = {
    where: PostArquivoScalarWhereInput
    data: XOR<PostArquivoUpdateManyMutationInput, PostArquivoUncheckedUpdateManyWithoutPostInput>
  }

  export type PostArquivoScalarWhereInput = {
    AND?: PostArquivoScalarWhereInput | PostArquivoScalarWhereInput[]
    OR?: PostArquivoScalarWhereInput[]
    NOT?: PostArquivoScalarWhereInput | PostArquivoScalarWhereInput[]
    id?: IntFilter<"PostArquivo"> | number
    nome?: StringFilter<"PostArquivo"> | string
    url?: StringFilter<"PostArquivo"> | string
    tipo?: StringFilter<"PostArquivo"> | string
    tamanho?: IntNullableFilter<"PostArquivo"> | number | null
    post_id?: IntFilter<"PostArquivo"> | number
  }

  export type PostCreateWithoutArquivosInput = {
    titulo: string
    conteudo: string
    data_criacao?: Date | string
    data_atualizacao?: Date | string | null
    professor: ProfessorCreateNestedOneWithoutPostsInput
    turma: TurmaCreateNestedOneWithoutPostsInput
  }

  export type PostUncheckedCreateWithoutArquivosInput = {
    id?: number
    titulo: string
    conteudo: string
    data_criacao?: Date | string
    data_atualizacao?: Date | string | null
    professor_id: number
    turma_id: number
  }

  export type PostCreateOrConnectWithoutArquivosInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutArquivosInput, PostUncheckedCreateWithoutArquivosInput>
  }

  export type PostUpsertWithoutArquivosInput = {
    update: XOR<PostUpdateWithoutArquivosInput, PostUncheckedUpdateWithoutArquivosInput>
    create: XOR<PostCreateWithoutArquivosInput, PostUncheckedCreateWithoutArquivosInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutArquivosInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutArquivosInput, PostUncheckedUpdateWithoutArquivosInput>
  }

  export type PostUpdateWithoutArquivosInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    conteudo?: StringFieldUpdateOperationsInput | string
    data_criacao?: DateTimeFieldUpdateOperationsInput | Date | string
    data_atualizacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    professor?: ProfessorUpdateOneRequiredWithoutPostsNestedInput
    turma?: TurmaUpdateOneRequiredWithoutPostsNestedInput
  }

  export type PostUncheckedUpdateWithoutArquivosInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    conteudo?: StringFieldUpdateOperationsInput | string
    data_criacao?: DateTimeFieldUpdateOperationsInput | Date | string
    data_atualizacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    professor_id?: IntFieldUpdateOperationsInput | number
    turma_id?: IntFieldUpdateOperationsInput | number
  }

  export type PostCreateManyProfessorInput = {
    id?: number
    titulo: string
    conteudo: string
    data_criacao?: Date | string
    data_atualizacao?: Date | string | null
    turma_id: number
  }

  export type ProfessorTurmaCreateManyProfessorInput = {
    turma_id: number
  }

  export type PostUpdateWithoutProfessorInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    conteudo?: StringFieldUpdateOperationsInput | string
    data_criacao?: DateTimeFieldUpdateOperationsInput | Date | string
    data_atualizacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    turma?: TurmaUpdateOneRequiredWithoutPostsNestedInput
    arquivos?: PostArquivoUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutProfessorInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    conteudo?: StringFieldUpdateOperationsInput | string
    data_criacao?: DateTimeFieldUpdateOperationsInput | Date | string
    data_atualizacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    turma_id?: IntFieldUpdateOperationsInput | number
    arquivos?: PostArquivoUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateManyWithoutProfessorInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    conteudo?: StringFieldUpdateOperationsInput | string
    data_criacao?: DateTimeFieldUpdateOperationsInput | Date | string
    data_atualizacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    turma_id?: IntFieldUpdateOperationsInput | number
  }

  export type ProfessorTurmaUpdateWithoutProfessorInput = {
    turma?: TurmaUpdateOneRequiredWithoutProfessoresNestedInput
  }

  export type ProfessorTurmaUncheckedUpdateWithoutProfessorInput = {
    turma_id?: IntFieldUpdateOperationsInput | number
  }

  export type ProfessorTurmaUncheckedUpdateManyWithoutProfessorInput = {
    turma_id?: IntFieldUpdateOperationsInput | number
  }

  export type PostCreateManyTurmaInput = {
    id?: number
    titulo: string
    conteudo: string
    data_criacao?: Date | string
    data_atualizacao?: Date | string | null
    professor_id: number
  }

  export type ProfessorTurmaCreateManyTurmaInput = {
    professor_id: number
  }

  export type PostUpdateWithoutTurmaInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    conteudo?: StringFieldUpdateOperationsInput | string
    data_criacao?: DateTimeFieldUpdateOperationsInput | Date | string
    data_atualizacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    professor?: ProfessorUpdateOneRequiredWithoutPostsNestedInput
    arquivos?: PostArquivoUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutTurmaInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    conteudo?: StringFieldUpdateOperationsInput | string
    data_criacao?: DateTimeFieldUpdateOperationsInput | Date | string
    data_atualizacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    professor_id?: IntFieldUpdateOperationsInput | number
    arquivos?: PostArquivoUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateManyWithoutTurmaInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    conteudo?: StringFieldUpdateOperationsInput | string
    data_criacao?: DateTimeFieldUpdateOperationsInput | Date | string
    data_atualizacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    professor_id?: IntFieldUpdateOperationsInput | number
  }

  export type ProfessorTurmaUpdateWithoutTurmaInput = {
    professor?: ProfessorUpdateOneRequiredWithoutTurmasNestedInput
  }

  export type ProfessorTurmaUncheckedUpdateWithoutTurmaInput = {
    professor_id?: IntFieldUpdateOperationsInput | number
  }

  export type ProfessorTurmaUncheckedUpdateManyWithoutTurmaInput = {
    professor_id?: IntFieldUpdateOperationsInput | number
  }

  export type PostArquivoCreateManyPostInput = {
    id?: number
    nome: string
    url: string
    tipo: string
    tamanho?: number | null
  }

  export type PostArquivoUpdateWithoutPostInput = {
    nome?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    tamanho?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PostArquivoUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    tamanho?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PostArquivoUncheckedUpdateManyWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    tamanho?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}